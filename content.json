{"pages":[],"posts":[{"title":"Swift编译过程","text":"不积跬步无以至千里 LLVMLLVM是构架编译器(compiler)的框架系统，以C++编写而成，用于优化以任意程序语言编写的程序的编译时间(compile-time)、链接时间(link-time)、运行时间(run-time)以及空闲时间(idle-time)。 LLVMIRLLVM中间层表示 ClangClang是一个由Apple主导编写，基于LLVM的C/C++/Objective-C轻量编译器 swiftc的命令行 swiftc -o main.out main.swift 编译成可执行文件 Swift Abstract Syntax Tree(AST) swiftc main.swift -dump-ast 生成抽象语法树 Swift Intermediate Language(SIL) swiftc main.swift -emit-sil 生成swift中间语言 LLVM Intermediate Representation(LLVM IR) swiftc main.swift -emit-ir 生成LLVM中间表示层数据 Assembly Language swiftc main.swift -emit-assembly 生成汇编语言","link":"/2019/12/12/Swift%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"},{"title":"舒适终端","text":"iTerm2 + Oh My Zsh自定义终端（Mac） homebrew、Xcode、git、iterm2、zsh Step1 下载iTerm2下载地址：https://www.iterm2.com/ 老版本MacOS需手动切换zsh，执行以下命令 1chsh -s /bin/zsh 如果想切回bash，执行以下命令 1chsh -s /bin/bash Step2 安装Oh My Zshcurl安装 1# curl 安装方式2sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" wget安装 1# wget 安装方式2sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" 地址：https://github.com/robbyrussell/oh-my-zsh Step3 安装PowerLine首先安装pip，已经安装的跳过 1sudo easy_install pip 安装powerline 1pip install powerline-status --user Step3 选择字体和配色iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text自行选择 Step4 选择主题下载agnoster主题 1cd ~/Desktop/OpenSource2git clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git3cd oh-my-zsh-agnoster-fcamblor/4./install 打开zshrc配置文件，将ZSH_THEME后面的字段改为”agnoster” 1oepn ~/.zshrc 修改完成后，执行配置 1source ~/.zshrc Step5 安装高亮插件1cd ~/.oh-my-zsh/custom/plugins/2git clone https://github.com/zsh-users/zsh-syntax-highlighting.git3open ~/.zshrc 这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上： 请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。 然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 执行命令使刚才的修改生效： 1source ~/.zshrc 最后愉快的去使用吧！","link":"/2019/12/24/%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF/"},{"title":"mysql性能优化（内部培训笔记）","text":"mysql性能优化方案存储引擎InnoDB：事务安全、行级锁定、主键索引、支持外键（5.7版本的默认存储引擎，推荐） CSV：表格 Archive：日志系统、历史数据、大量的设备数据采集 Memory：redis，查找热度比较高的数据 MyISAM:5.5以前的默认版本 Federated:分布式、远程获取数据（远程表） 索引排序，随机io变有序io 适合大中型表 MySQL中使用的是B+Tree：所有数据存在叶子节点，左闭合 优化建议：索引列的数据长度能少则少；不一定越多越好；覆盖索引，少用select *；列的离散性要好 explain 执行计划 锁","link":"/2019/12/11/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E5%86%85%E9%83%A8%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0%EF%BC%89/"},{"title":"开篇","text":"长风破浪会有时，只怪云帆济沧海 自己本人卢希强，别名小希，28岁，居住在武汉，一个2015年毕业的软件开发工程师，四年多时间沉心工作，职业搬砖，知识零碎，回头皆空。兴趣爱好广泛，一切运动、唱歌、游戏……无奈时间不允许。回归近三十年人生路，波澜不惊，平平淡淡，车房都有，即将结婚。特开博客记录生活工作点滴。 生活 不求大富大贵，但求平安风顺 结婚在即，奔三冲刺，平平安安才是真。 工作 Stay hungry, stay foolish 专职于iOS开发，四年半开发经验，工作之余接触关于web端的相关知识。感觉技术日新月异，不往前便落后，所以坚持学习、坚持笔记、坚持coding吧。 目标 先定个小目标，赚他个一个亿？ 1、学习flutter,copy一个完整的公司项目； 2、减肥30斤； 3、学习SwiftUI、vue等； 4、每月一本书； 5、赚钱赚钱。 最后 会当凌绝顶，一览众山喜爱 祝自己工作顺利，升职加薪，生活幸福，股市长虹！ 2020为了生活，冲鸭！","link":"/2019/12/02/%E5%BC%80%E7%AF%87/"},{"title":"面向对象的一些事","text":"由来​ 很久以前，软件开发的世界还是一片浑浑噩噩，不管开发什么软件都面临着复杂性这个问题，代码里面到处是goto语句，程序的流程随意跳转。众生写代码时，越写到后面越不知道自己写的是什么。这时候出现一位巨人，他就是结构化编程。 结构化编程的基本思想是：有序地控制流程，即把程序的执行顺序限制为顺序、分支和循环这三种；把共通的处理归结为例程（函数）。 虽然结构化解决了程序控制流的复杂问题，但程序里面不仅包括控制结构，还包括要处理的数据。随着处理数据的增加，程序的复杂性也会上升。这时候，面向对象编程来了！ Simula​ 面向对象技术最早是在编程语言Simula中提出的。1967年5月20日，在挪威奥斯陆郊外的小镇莉沙布举行的IFIP TC-2 工作会议上，挪威科学家Ole-Johan Dahl和Kristen Nygaard正式发布了Simula 67语言。Simula 67被认为是最早的面向对象程序设计语言，是面向对象的开山祖师，它引入了所有后来面向对象程序设计语言所遵循的基础概念：对象、类、继承，但它的实现并不是很完整。 ​ Simula虽然最早提出面向对象的概念，但因为其本身复杂，比较难学，而并没有大规模流行。但Simula提出的面向对象的概念对程序语言后继的发展产生了巨大和深远的影响。 Smalltalk​ Smalltalk是公认为历史上第二个面向对象的程序语言，而且是第一个完整实现了面向对象技术的语言。 ​ 最早的Smalltalk原型由艾伦·凯于70年代初提出。类（来自Simula-67）、海龟绘图（来自MIT的LOGO）以及图形界面等概念的有机组合，构成了Smalltalk的最初的蓝图。在1971年到1975年之间，艾伦·凯在Xerox PARC的小组设计并实现了第一个真正的Smalltalk语言系统。 ​ Smalltalk引领了面向对象的设计思想的思潮，对其它众多的程序设计语言的产生起到了极大的推动作用。C++，C#，Objective-C，Actor，Java和Ruby等，无一不受到Smalltalk的影响，这些程序语言中也随处可见Smalltalk的影子。 ​ 除了编程语言受到Smalltalk的影响外，90年代的许多软件开发思想得利于Smalltalk，例如设计模式、敏捷编程和代码重构等。 面向对象与基于对象的区别​ “面向对象”和“基于对象”两个不同的概念。面向对象的三大特点（封装，继承，多态）缺一不可，通常“基于对象”使用对象，但是无法利用现有的对象模板产生新的对象类型，继而产生新的对象，也就是说“基于对象”没有继承的特点，而“多态”是表示为父类类型的子类对象实例，没有了继承的概念也就无从谈论“多态”。现在的很多流行技术都是基于对象的，它们使用一些封装好的对象，调用对象的方法，设置对象的属性。但是它们无法让程序员派生新对象类型。他们只能使用现有对象的方法和属性。所以当你判断一个新的技术是否是面向对象的时候，通常可以使用后两个特性来加以判断。 面向对象的三个基本特征继承​ 继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。 实现继承是指直接使用基类的属性和方法而无需额外编码的能力； 接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力。 多态​ 多态即一个名字有多种语义，一个词法元素可以作多种解释。面向对象系统，对象封装了操作，利用重名的操作，让各对象自己去释意执行，这种多义性不会带来混淆，方便与高层设计。虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。最常见的多态就是将子类传入父类参数中，运行时调用父类方法时通过传入的子类决定具体的内部结构或行为。 封装​ 面向对象的诸多优点是靠封装手段得到“对象”而获得的。封装的目的在于将对象用户和对象的实现者分开，用户不必知道对象行为实现的细节，只要以实现者提供的消息来访问该对象。封装是面向对象的特征之一，是对象和类概念的主要特性。简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。 最后1、抽象会使复杂的问题更加简单化。2、从以前面向过程的执行者，变成了张张嘴的指挥者。3、面向对象更符合人类的思维，面向过程则是机器的思想","link":"/2020/04/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/"}],"tags":[],"categories":[]}