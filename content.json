{"pages":[],"posts":[{"title":"BIM介绍","text":"什么是BIM? 进入2017年以后，一个被称之为“BIM”的新事物出现在中国的建筑业中，瞬时间所有的施工企业都面临着接触BIM的挑战。 BIM是源自于“Building Information Modeling”的缩写，中文译为“建筑信息模型”。该技术通过数字化手段，在计算机中建立出一个虚拟建筑，该虚拟建筑会提供一个单一、完整、包含逻辑关系的建筑信息库。需要注意的是，在这其中“信息”的内涵不仅仅是几何形状描述的视觉信息，还包含大量的非几何信息，如材料的耐火等级和传热系数、构件的造价和采购信息等等。其本质是一个按照建筑直观物理形态构建的数据库，其中记录了各阶段的所有数据信息。建筑信息模型（BIM）应用的精髓在于这些数据能贯穿项目的整个寿命期，对项目的建造及后期的运营管理持续发挥作用。 BIM基本特性 BIM是以建筑工程项目的各项相关信息数据为基础而建立的建筑模型。通过数字信息仿真，模拟建筑物所具有的真实信息。BIM是以从设计、施工到运营协调、项目信息为基础而构建的集成流程，它具有可视化、协调性、模拟性、优化性和可出图性5大特点。建筑公司通过使用BIM，可以在整个流程中将统一的信息创新、设计和绘制出项目，还可以通过真实性模拟和建筑可视化来更好地沟通，以便让项目各方了解工期、现场实时情况、成本和环境影响等项目基本信息。 (一) 可视化 可视化，即“所见即所得”的形式，对于建筑行业来说，可视化真正运用在建筑业地作用非常大。例如，经常拿到的施工图纸只是各个构件的信息，在图纸上以线条绘制表达，但是真正的构造形式就需要建筑业人员去自行想象了。如果建筑结构简单，那么没有太大的问题，但是近几年形式各异、复杂造型的建筑不断推出，那么光靠想象就不太实际了。所以BIM提供了可视化的思路，将以往的线条式的构件，形成一种三维的立体实物图形展示在人们的面前。 以前，建筑业也会制作设计方面的效果图，但是这种效果图是分包给专业的效果图制作团队，根据线条式信息识读设计制作出来的，并不是通过构件的信息自动生成的，因此缺少了同构件之间的互动性和反馈性。而BIM提到的可视化，则是一种能够同构件之间形成互动性和反馈性的可视化。在BIM建筑信息模型中，由于整个过程都是可视的，所以可以用于效果图的展示和报表的生成。更重要的是通过建筑可视化，可以在项目的设计、建造和运营过程中进行沟通、讨论和决策。 (二) 协调性 协调性是建筑业中的重点内容，无论是施工单位和设计单位还是业主，都在做着协调及相互配合的工作。一旦在项目的实施过程中遇到了问题，就需要各相关人员组织起来进行协调会议，找出施工中问题发生的原因及解决办法，然后做出相应变更、补救措施等来解决问题。那么，问题的协调就只能等出现问题后再进行协调吗?在设计时，由于各专业设计师之间的沟通不到位，往往会出现各种专业之间的碰撞问题，例如，在对暖通(供热、供燃气、通风及空调工程)等专业中的管道进行布置时，可能遇到构件阻碍管线的布置。这种问题是施工中常遇到的碰撞问题，而BIM的协调性服务，可以帮助处理这种问题，也就是说BIM建筑信息模型可在建筑物建造前期，对各专业的碰撞问题进行协调，生成并提供出协调数据。当然，BIM的协调作用也不止应用于解决各专业间的碰撞问题，它还可以解决电梯井布置与其他设计布置及净空要求的协调、防火分区与其他设计布置的协调以及地下排水布置与其他设计布置的协调等问题。 (三) 模拟性 BIM的模拟性并不是只能模拟、设计出建筑物的模型，还可以模拟难以在真实世界中进行操作的事件。在设计阶段，BIM可以对设计上需要进行模拟的一些事件进行模拟实验，例如，节能模拟、紧急疏散模拟、日照模拟和热能传导模拟等。在招投标和施工阶段可以进行4D模拟(3D模型加项目的发展时间)，也就是根据施工的组织设计模拟实际施工，从而确定合理的施工方案。同时还可以进行5D模拟(基于3D模型的造价控制)，从而实现成本控制。在后期运营阶段，还可以进行日常紧急情况处理方式的模拟，如地震人员逃生模拟和消防人员疏散模拟等。 (四) 优化性 事实上，整个设计、施工和运营的过程就是一个不断优化的过程，在BIM的基础上，可以更好地进行优化。优化通常受信息、复杂程度和时间的制约。准确的信息影响优化的最终结果，BIM模型提供了建筑物的实际存在的信息，包括几何信息、物理信息以及规则信息。对于高度复杂的项目，由于参与人员本身的原因，往往无法掌握所有的信息，因此需要借助一定的科学技术和设备的帮助。现代建筑物的复杂程度大多超过参与人员本身的能力极限，BIM及与其配套的各种优化工具提供了对复杂项目进行优化的服务。 基于BIM的优化，可以完成以下两种任务： 第1种：对项目方案的优化。把项目设计和投资回报分析结合起来，可以实时计算出设计变化对投资回报的影响。这样业主对设计方案的选择就不会停留在对形状的评价上，而是哪种项目设计方案更有利于自身的需求。 第2种：对特殊项目的设计优化。在大空间随处可看到异型设计，如裙楼、幕墙和屋顶等。这些内容看似占整个建筑的比例不大，但是占投资和工作量的比例却往往很大，而且通常是施工难度较大和施工问题较多的地方，对这些内容的设计施工方案进行优化，可以显著地改善工期和造价。 (五) 可出图性 使用BIM绘制的图纸，不同于建筑设计院所设计的图纸或者一些构件加工的图纸，而是通过对建筑物进行可视化展示、协调、模拟和优化以后，绘制出的综合管线图（经过碰撞检查和设计修改，消除了相应错误）、综合结构留洞图（预埋套管图）以及碰撞检查侦错报告和建议改进方案。 BIM与工程造价的交流 （一）BIM对造价的影响 BIM对于造价来说很有可能会改变造价的整个工作流程，包括造价员的整个工作思维模式，传统的造价工作模式是：识图→算量（目前是软件提量+手工算量）→套项→调整材料价、调整取费，完成造价。这样一个过程有很多重复的工作，并且很多环节是需要大量的人工劳动力来解决造价中遇到的复杂问题，在可研、设计、招标、施工阶段需要重复计算不同阶段的造价。这样的工作模式势必会增加很多额外的成本，尤其后期设计中的变更修改阶段，每一次修改都需要重新核对一下图纸的改变程度，在传统的单机单专业的工作方式，很多设计修改不会被造价人员做发现，这样的造价计算肯定会和实际的清单会有很多误差。而基于BIM下的造价可以在不同阶段计算不同阶段的造价清单，只要模型建立的足够精细就可以得到十分精准的造价信息。 工程造价分为三个部分，算量问题，组价问题和合同问题。现阶段来看，BIM技术的普及对工程造价的冲击主要局限于算量问题上。BIM作为应用软件，更加简化了工程量的计算，使造价师从算量的繁琐工作中脱离出来，大量减少了计算工作，将更多的目光放在组价和合同问题上。 另外BIM技术使各阶段数据无缝对接，实现全过程、全要素可靠、准确地工程造价管理。这在一定程度上打破了之前由于各阶段数据不连续，各环节之间协同共享存在障碍，导致工程信息不透明，致使工程项目”水深“现象。 (二) BIM是否会取代造价 前面提到，BIM的普及，会让造价师的目光更多的集中在组价和合同问题上。对于价格，合同，建设工程前后的费用控制，相关法律和规章是以工程经验积累起来的。技术软件再万能，在没有标准可循的组价、合同法律法规的理解等方面也不能和人脑比拼。当工程量不需要计算的时候，造价师会更有精力去做成本控制等一些控制造价的核心内容。所以BIM只能技术给造价师提供更宽、更高的职业空间。 在国外，工料测量师被业主称为“费用经理”。他们的业务不止于单一环节的“计价”、“造价”，更在于全过程“控价”。从工程量预测，到投标招标决策；从工程可行性判断，到工程成本管理，工料测量师都可以从经济角度予以解决方案。反观国内造价师，“造价”二字当顶，已经明示其本职。目前国内造价师的工作也确实以算量、套价为主，很少实现全过程成本管控。 所以未来造价工程师的咨询业务很可能会改变，不再是单一的造价内容，而是关注于工程项目全过程的成本管控咨询。但是BIM业务也不会完全取代造价业务，原因如下： BIM即便发展到人工智能的程度，始终不如人懂得其他人的“心理活动”，对敏感性问题完全无能。 建设工程是为人服务的。人有种种立场和差异化感受。用户与用户之间，企业与企业之间，社会与社会之间，甚至这三者之间，追求往往不那么一致。用户体验、造价规范与工程效益的同步协调，涉及种种微妙的利害权衡。国内的工程造价，不仅是经济账，也是心理战。 更实时更适配的BIM算法始终依赖人的输入。BIM计算实质是工程经验的数据化，但实际的工程实践不是BIM模型所能实现的。所以工程经验数据化的进度和精度取决于人对工程的理解。 (三)BIM如何运用于造价工作 以BIM模型为基础按照BIM建筑模型的各个构件自动挂接上对应的清单和定额，这样就可以实时的计算出造价清单，如果模型有变更修改也可以在造价中有所体现，真的达到一处修改实时计量的工作模式。这样不但提高了算量的工作效率而且还提高了清单精确度，并且在BIM模型中我们可以批量修改、多工程链接、可视化操作等一系列手段来灵活的完成我们的工作任务，BIM以全新的协同工作方式代替传统的单机工作模式。 但是从行业的角度来看，我们造价工作者不应该局限本专业的范围，我们在头脑应该有一个BIM宏观的概念，首先了解BIM在整个建筑生命周期都能做什么，其次是掌握造价行业的新软件新技术，头脑中一定要时刻建立一个模型化、协同化的思维模式。 BIM作为工具，它的存在是简便造价师的工作量。也纠正了一直以来造价师应该把握的方向：造价师不是算量员，他们的存在是为了更好的进行工程成本控制。BIM本身并不能成为解决方案，也不能发挥作用，真正的解决方案是行业从业人员充分挖掘和利用BIM价值更好、更快完成工程任务。BIM简化了造价师的重复算量工作，为造价师的发展提供了更宽、更高的空间！ (四)造价过程中BIM应用难点 组织层面 首先从企业战略上来讲，企业的规模和性质不同会导致应用 BIM 的目标有所差异，比如万达集团等大型企业采取整套开发散售模式、融合开发和经营的方式，此种背景下以全生命周期制定企业 BIM 应用目标。企业不同的定位导致 BIM 技术应用目标上有所不同，进而对企业信息需求、期望功能等产生影响，所以，企业应当充分考虑自身的定位和性质，然后制定企业发展战略。 其次，从制度上来讲，企业制定制度是为了约束员工行为，从而保证工作的顺利开展。应用 BIM 技术时会增加企业的资金压力，一方面传统工作方式和新型 BIM 管理模式的交替会短期增加企业成本；另一方面，新技术利用率低致使新旧工作方式重叠造成资源重复消耗，增加企业资金负担。此外，BIM 技术对技术人员有着较高的要求，企业需要在人员上投入更多的资金。 此外，从项目管理角度看，BIM 技术在全生命周期中不同阶段需要建立相应的方法，当前在国内企业项目管理中各个阶段和专业之间并没有做好良好的沟通，所以信息缺乏，难以实现统筹管理，导致 BIM 技术应用出现障碍。 技术方法 \\1. 工作流程的制约。企业造价管理包括设计阶段、施工阶段、工程变更等诸多方面因素的内容，在不同的阶段造价管理侧重点也不同，比如策划期需要做好估算，设计图纸期需要做好预算工作等。目前很多企业都需要依靠设计单位设计出相关的 BIM 模型来实现企业造价的管理，但是在造价管理工作流程中有很多有待完善之处。我国要求造价结果由造价人员完全负责，而造价人员需要在 BIM 早期设计中和设计人员共同完成构件信息的定义，但是目前我国很多企业没有做到这一点。在 BIM 技术应用中，需要根据设计阶段模型创建施工图预算，进而得到投标清单，在这项工作中需要投入大量的时间和经历，导致很多企业对此技术的应用望而却步。 \\2. 造价软件和 BIM 软件信息不对称。不同类型的企业对构件信息有着不同的要求，导致 BIM 软件模型设计和应用具有一定的不同之处。目前 BIM 软件中缺乏对施工工艺、部件、清单计算规范要求的考虑，没有有效将材料、工艺做出分类，最终导致 BIM 在应用中出现不同程度的问题，所以，为了实现 BIM 技术在造价管理中的应用，应当充分考虑其中的差异。 \\3. 知识产权问题。BIM 技术的应用还会涉及到知识产权问题，设计人员需要在 BIM 技术设计中对模型进行搭建和确认。创建完的 BIM 模型含有丰富的信息资源，但是如何合理有效地使用成为了一项难以把握的工作。BIM 模型在使用中有的操作、变更等工作都需要专门的人员完成，导致项目各阶段 BIM 难以形成链条，阻碍了该技术的推广和应用。 经济方面 从经济方面来讲，BIM 技术的应用出现障碍主要可以体现在三个方面，第一，政府缺乏相应的机理政策，企业财政收支上存在问题。虽然国家认可并推广该技术的应用，但是目前政府并没有发布关于 BIM 技术应用的相关标准要求，也就是说法律法规有所欠缺。第二，企业的经济压力，上文已经提到过企业在应用 BIM 技术是需要承担的经济压力，这是阻碍 BIM 技术应用的一大原因。第三，BIM 应用结果受到内部技术人员激励政策的影响。管理者确定了决策后需要技术人员实现，中国社会在事物认知、处理等方面和 BIM 精细化和数据化管理的理念存在较大的差异，所以需要考虑激励政策的合理应用。 BIM模型的构架 BIM模型（Building Information Model）是设施所有信息的数字化表达，是一个可以作为设施虚拟替代物的信息化电子模型，是共享信息的资源，也是Building Information Modeling和Building Information Management的基础。 人们常以为BIM模型是一个单一的模型，但到了实际操作层面，由于项目所处的阶段不同、专业分工不同、实现目标不同等多种原因，项目的不同参与方还必须拥有各自的模型，例如场地模型、建筑模型、结构模型、设备模型、施工模型、竣工模型等。这些模型是从属于项目总体模型的子模型，但规模比项目的总体模型要小。 所有的子模型都是在同一个基础模型上生成的，这个基础模型包括了建筑物最基本的构架：场地的地理坐标与范围、柱、梁、楼板、墙体、楼层、建筑空间等，而专业的子模型就是在基础模型的上面添加各自的专业构件形成的，这里专业子模型与基础模型的关系就相当一个引用与被引用的关系，基础模型的所有信息被各个子模型共享。 BIM生态系统 BIM应用是与计算机和网络系统密切相关的，如何从软硬件的角度搭建起BIM应用系统的框架是BIM应用的必要条件，但是无论从纵向的全生命周期来说，还是横向的各行各业的项目参与方来说，BIM应用的广泛性都给BIM系统应用框架的搭建提出了很高的要求，必须保证在设施全生命周期中的BIM应用充分实现信息交换。目前建筑业的信息表达与交换的国际标准技术是IFC标准，如何在系统中直接传递、交换IFC数据，那就需要设置一个BIM服务器，BIM服务器与BIM知识库一起组成一个以IFC格式为网络的数据集成与应用平台。 用户进行相关应用时可通过BIM服务器提取所需的信息，同时也可以对模型中的信息进行扩展，然后将扩展的模型信息重新提交给服务器，这样就实现了BIM数据的存储、管理、交换和应用。再进一步，如果BIM服务器实现以集成BIM为基础，就可以实现对象级别的数据管理以及权限配置，能支持多用户协作和同步修改。 BIM全周期实施规划 采用BIM技术，不仅可以实现设计阶段的协同设计，施工阶段的建造全过程一体化和运营阶段对建筑物的智能化维护和设施管理，同时还能打破从业主到设计、施工运营之间的隔阂和界限，实现对建筑的全寿命周期管理。 在2010年美国宾夕法尼亚州立大学的计算机集成化施工研究组经研究写成的《BIM项目实施计划指南》第二版中，发表了【BIM技术的25种常见的应用图】，如下： 这25种应用跨越了设施全生命周期的四个阶段，即规划阶段（项目前期策划阶段）、设计阶段、施工阶段、运营阶段。我国通过借鉴上述对BIM应用的分类框架，结合目前国内事实现状，归纳得出【项目四阶段中的20种BIM典型应用】，如下： 建筑业的工序在国内外实质上大同小异，BIM的应用也是如此，但有些应用二者的划分尺度不一样，如前者的“3D协调”与后者的“管线综合”类似，但后者的描述过于狭窄，好像仅限于管线的碰撞分析，而结构梁柱引起的净空高度不够等其他构建协调优化问题就不管了，所以前者的描述较为全面。 以下就项目前期策划阶段、设计阶段、施工阶段和运营阶段中BIM的应用进行一个概括性介绍： (一) 项目前期策划阶段 项目前期策划阶段对整个建筑工程项目的影响很大，美国HOK建筑师事务所麦克利米曾提出著名的麦克利米曲线图： 图表表明在项目前期的优化对于项目的成本和功能影响是最大的，而优化设计的费用是最低的；而在项目后期优化对于成本和功能影响在逐渐变小，而优化设计的费用却逐步增高。出于上述原因，在项目的前期应当尽早应用BIM技术。 BIM技术应用在项目前期的工作有很多，包括现状建模与模型维护、场地分析、成本估算、阶段规划、规划编制、建筑策划等。 投资估算 应用BIM系统强大的信息统计功能，在方案阶段可运用数据指标等方法获得较为准确的土建工程量及土建造价，同时可用于不同方案的对比，可以快速得出成本的变动情况，权衡出不同方案的造价优劣，为项目决策提供重要而准确的依据。BIM技术可运用计算机强大的数据处理能力进行投资估算，这大大减轻了造价工程师的计算工作量，造价工程师可节省时间从事更有价值的工作如确定施工方案、评估风险等，进一步能细致考虑施工中许多节约成本等专业问题，这些对于编制高质量的预算来说非常重要。 现状模型 根据现有的资料把现状图纸导入到基于BIM技术的软件中，创建出道路、建筑物、河流、绿化以及高程的变化起伏，并根据规划条件创建出本地块的用地红线及道路红线，并生成面积指标。 总图规划 在现状模型的基础上根据容积率、绿化率、建筑密度等建筑控制条件创建工程的建筑体块各种方案，创建体量模型。做好总图规划、道路交通规划、绿地景观规划、竖向规划以及管线综合规划。 环境评估 根据项目的经纬度，借助相关的软件采集此地的太阳及气候数据，并基于BIM模型数据利用相关的分析软件进行气候分析，对方案进行环境影响评估，包括日照环境影响、风环境影响、热环境影响、声环境影响等评估。某些项目还需要进行交通影响模拟。 (二) 设计阶段 BIM在建筑设计的应用范围非常广泛，无论在设计方案论证，还是在设计创作、协同设计、建筑性能分析、结构分析，以及在绿色建筑评估、规范验证、工程量统计等许多方面都有广泛的应用。 设计方案论证 BIM三维模型展示的设计效果十分方便评审人员、业主对方案进行评估，甚至可以就当前设计方案讨论施工可行性以及如何削减成本、缩短工期等问题，可最修改方案提供切实可行的方案。由于是用可视化方式进行，可获得来自最终用户和业主的积极反馈，使决策的时间大大减少，促成共识。 设计创作 由于在BIM软件中组成整个设计的就是门、窗、墙体等单个3D构件元素，则设计过程就是不断确定和修改各种构件的参数，而这些建筑构件在软件中是数据关联、智能互动的。而最终设计成果的交付就是BIM模型，所有平、立、剖二维图纸都可以根据模型随意生成，由于图纸来源都是同一个BIM模型，所以所有图纸和图表数据都是互相关联的，也是实时互动的，从根本上避免了不同视图不同专业图纸出现的不一致现象。 协同设计 BIM技术使不同专业的甚至是身处异地的设计人员都能够通过网络在同一个BIM 模型上展开协同设计，使设计能够协调进行。以往各专业各视角之间不协调的事情时有发生，即使花费了大量人力物力对图纸进行审查仍然不能把不协调的问题全部改正。有些问题到了施工过程才能发现，给材料、成本、工期造成了很大的损失。应用BIM技术以及BIM服务器，通过协同设计和可视化分析就可以及时解决上述设计中的不协调问题，保证了后期施工的顺利进行。 绿色建筑评估 BIM模型中包含了用于建筑性能分析的各种数据，只要数据完备，将数据通过IFC、gbXML等交换格式输入到相关的分析软件中，即可进行当前项目的节能分析、采光分析、日照分析、通风分析以及最终的绿色建筑评估。 工程量统计 BIM模型信息的完备性大大简化了设计阶段对工程量的统计工作，模型的每个构件都和BIM数据库的成本库相关联，当设计师在对构件进行变更时，成本估算都会实时更新。 在用二维CAD技术进行设计时，绘图的工作量很大，设计师无法花很多时间对设计方案进行静心推敲。应用BIM技术，只要完成了设计构想，确定了BIM模型的最后构成，马上就可以根据模型生成各种施工图，而且由于BIM技术的协调性，后期调整设计的工作量是很小的，这样设计质量和图纸质量都得到了保障。 (三) 施工阶段 BIM技术在施工阶段可以有如下多个方面的应用：3D协调/管线综合、支持深化设计、场地使用规划、施工系统设计、施工进度模拟、施工组织模拟、数字化建造、施工质量与进度监控、物料跟踪等。 碰撞综合协调 在施工开始前利用BIM模型的可视化特性对各个专业（建筑、结构、给排水、机电、消防、电梯等）的设计进行空间协调，检查各个专业管道之间的碰撞以及管道与结构的碰撞。如发现碰撞及时调整，这样就较好地避免施工中管道发生碰撞和拆除重新安装的问题。 施工方案分析 在BIM模型上对施工计划和施工方案进行分析模拟，充分利用空间和资源整合，消除冲突，得到最优施工计划和方案。特别是对于新形式、新结构、新工艺和复杂节点，可以充分利用BIM的参数化和可视化特性对节点进行施工流程、结构拆解、配套工器具等角度的分析模拟，可以改进施工方案实现可施工性，以达到降低成本、缩短工期、减少错误和浪费的目的。 数字化建造 数字化建造的前提是详尽的数字化信息，而BIM模型的构件信息都以数字化形式存储。例如像数控机床这些用数字化建造的设备需要的就是描述构件的数字化信息，这些数字化信息为数控机床提供了构件精确的定位信息，为建造提供了必要条件。 施工科学管理 通过BIM技术与3D激光扫描、视频、图片、GPS、移动通讯、RFID（二维码等射频识别技术）、互联网等技术的集成，可以实现对现场的构件、设备以及施工进度和质量的实时跟踪。另外通过BIM技术和管理信息系统的集成，可以有效支持造价、采购、库存、财务等的动态精确管理，减少库存开支，在竣工时可以生成项目竣工模型和相关文件，有利于后续的运营管理。并且业主、设计方、预制厂商、材料供应商等可利用BIM模型的信息集成化与施工方进行沟通，提高效率减少错误。 总的来说，应用BIM技术可以为建筑施工带来新的面貌。 (四) 运营阶段 在运营维护阶段BIM可以有如下这些方面的应用：竣工模型交付；维护计划；建筑系统分析；资产管理；空间管理与分析；防灾计划与灾害应急模拟。 竣工模型交付与维护计划：施工方竣工后对BIM模型进行必要的测试和调整再向业主提交，这样运营维护管理方得到的不只是设计和竣工图纸，还能得到反映真实状况的BIM模型，里面包含了施工过程记录、材料使用情况、设备的调试记录以及状态等资料。BIM能将建筑物空间信息、设备信息和其他信息有机地整合起来，结合运营维护管理系统可以充分发挥空间定位和数据记录的优势，合理制定运营、管理、维护计划，尽可能降低运营过程中的突发事件。 资产管理 通过BIM建立维护工作的历史纪录，可以对设施和设备的状态进行跟踪，对一些重要设备的适用状态提前预判，并自动根据维护记录和保养计划提示到期需保养的设备和设施，对故障的设备从派工维修到完工验收、回访等均进行记录，实现过程化管理。另外如果基于BIM的资产管理系统能和诸如停车场管理系统、智能监控系统、安全防护系统等物联网结合起来，实行集中后台控制与管理，则能很好地解决资产的实时监控、实时查询和实时定位，并且实现各个系统之间地互联、互通和信息共享。 防灾模拟 基于BIM模型丰富的信息，可以将模型以IFC等交换格式导入灾害模拟分析软件，分析灾害发生的原因，制定防灾措施与应急预案。灾害发生后，将BIM模型以可视化方式提供给救援人员，让救援人员迅速找到合适救灾路线，提高救灾成效。 空间管理 应用BIM技术可以处理各种空间变更的请求，合理安排各种应用的需求，并记录空间的使用、出租、退租的情况，实现空间的全过程管理。","link":"/2021/10/12/BIM%E4%BB%8B%E7%BB%8D/"},{"title":"Swift编译过程","text":"不积跬步无以至千里 LLVMLLVM是构架编译器(compiler)的框架系统，以C++编写而成，用于优化以任意程序语言编写的程序的编译时间(compile-time)、链接时间(link-time)、运行时间(run-time)以及空闲时间(idle-time)。 LLVMIRLLVM中间层表示 ClangClang是一个由Apple主导编写，基于LLVM的C/C++/Objective-C轻量编译器 swiftc的命令行 swiftc -o main.out main.swift 编译成可执行文件 Swift Abstract Syntax Tree(AST) swiftc main.swift -dump-ast 生成抽象语法树 Swift Intermediate Language(SIL) swiftc main.swift -emit-sil 生成swift中间语言 LLVM Intermediate Representation(LLVM IR) swiftc main.swift -emit-ir 生成LLVM中间表示层数据 Assembly Language swiftc main.swift -emit-assembly 生成汇编语言","link":"/2019/12/12/Swift%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"},{"title":"bpmn流程模式","text":"BPM常见的流程模式有：顺序流程、会签流程、或签流程、分支流程、并行流程、子流程、任意流程等，这些流程模式均在BPMN2.0规范中有明确的定义，activiti、flowable、camunda等开源工作流引擎也都支持这些模式，以下重点介绍会签流程、或签流程、分支流程、并行流程这四种流程模式。 一、会签流程1、适用场景会签是一种联合审批的特殊审批节点，可理解为一种多人投票机制，一个任务需要多个人同时处理，然后汇总多个人的意见，决定流程下一步该如何执行。流程设计时，若会签审批节点中设置多个参与人，流程运行时，会签节点任务需要多人共同处理，然后汇总多人的处理意见，决定会签节点的处理结果。例如：员工发起采购申请，需经过多名领导共同审批后，才决定是否可以采购，只要其中1名领导不同意，便退回申请人。 2、具体规则会签分并行会签和顺序会签两种：并行会签：指同一个审批节点设置多个人，如ABC三人，三人会同时收到待办，需全部同意之后，审批才可到下一审批节点。顺序会签：指同一个审批节点设置多个人，如ABC三人，三人按顺序依次收到待办，即A先审批，A提交后B才能审批，需全部同意之后，审批才可到下一审批节点。 3、设置方法BPMN2.0规范中提供了bpmn:multiInstanceLoopCharacteristics多实例循环的模型定义，activiti、flowable、camunda等开源工作流引擎均支持该属性，云程BPM基于camunda实现，对bpmn:multiInstanceLoopCharacteristics进行了封装，提供了界面可视化配置功能，并支持多人并行会签和多人顺序会签的功能，顺序会签在一些特定的业务场景下是有用的，个别中国特色流程需求有审批顺序的要求。 二、或签流程1、适用场景一个流程审批节点里有多个处理人，任意一个人处理后就能进入下一个节点。例如：员工发起采购申请，提交给多名领导审批，只要有一名领导同意即可提交到下一节点。 2、具体规则指同一个审批节点设置多个人，如ABC三人，三人会同时收到审批待办，只要其中任意一人审批即可到下一审批节点。 3、设置方法BPMN2.0规范中提供了bpmn:multiInstanceLoopCharacteristics多实例循环的模型定义，并通过bpmn:completionCondition标签定义多实例完成条件，activiti、flowable、camunda等开源工作流引擎均支持该属性，云程BPM基于camunda实现，对bpmn:multiInstanceLoopCharacteristics和bpmn:completionCondition进行了封装，提供了界面可视化配置功能，配置多人办理规则为“多人任意”即可实现该功能。 三、分支流程1、适用场景分支流程的适用场景：流程中某个节点后有多个分支节点，根据不同条件执行不同的分支，即不同的数据会走不同的流程路径。例如：请假申请，可根据请假天数走不同的审批路径，3天以内请假由人力资源审批，超过3天的请假由公司领导审批。 2、具体规则1、分支流程使用【排他网关】，连接在【排他网关】后面的线条，有分流作用，点击线条可设置流转条件；2、上一节点点击【提交】后，根据【排他网关】设置按顺序判断所有分支流转条件，出现满足流转条件时，就进入相应的分支节点。3、如果不设置，表示无条件限制，会直接进入该节点；如果设置了流转条件，则只有满足条件才会进入该节点；如果所有的条件都不满足，则会流转到设置的默认方向；如果有多个条件满足，则会按设置的条件顺序判断，直到出现第一个满足的条件，就进入该节点。 3、设置方法BPMN2.0规范中提供了bpmn:exclusiveGateway排他网关标签，activiti、flowable、camunda等开源工作流引擎均支持该标签，云程BPM基于camunda实现，严格遵照标准的BPMN2.0网关模型，并提供了界面可视化配置功能。 四、并行流程1、适用场景并行流程适用场景：流程中某个节点后有多个节点需要并行执行，节点的处理人需同时收到流程待办，各自处理待办，当所有分支线上的节点都执行后，流程才进入到下一个节点。例如：员工提交请假申请，同时送部门经理和人力资源部审批，需要部门经理和人力资源全部审批通过后，才算流程审批通过。 2、具体规则1、【并行网关】必须成双使用，连接在【并行网关】后面的线条，才有并流作用；2、上一节点点击【提交】后，无论线条是否设置条件，都自动进入所有的分支节点。当所有分支都执行后，才进入这些分支同时连接的下一个节点； 3、设置方法BPMN2.0规范中提供了bpmn:parallelGateway并行网关标签，activiti、flowable、camunda等开源工作流引擎均支持该标签，云程BPM基于camunda实现，严格遵照标准的BPMN2.0网关模型，并提供了界面可视化配置功能。","link":"/2021/09/18/bpmn%E6%B5%81%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"title":"iOS性能优化整理","text":"iOS性能优化整理一、性能优化–卡顿卡顿的原因主要是CPU、GPU引起的 CPU(中央处理器): 对象的创建和销毁、对象属性的调整、布局计算、文本的计算和排版、图片的格式转换和解码、图像的绘制(Core Graphics)GPU(图形处理器)：纹理的渲染 卡顿优化–CPU1尽量试用轻量级对象，比如用不到事件处理的地方可以考虑试用CALayer取代UIView23不要频繁的调用UIView的相关属性，比如frame、bounds、transform等属性，尽量减少不必要的修改45尽量提前计算好布局，在有需要时一次性调整对应的属性，不要多次修改属性67Autolayout会比直接设置frame消耗更多的CPU资源89图片的size最好刚好跟UIImageView的size保持一致1011控制一下线程的最大并发数量1213尽量把耗时的操作放在子线程，比如文本处理（尺寸计算、绘制），图片处理（解码、绘制） 卡顿优化–GPU1尽量避免短时间内大量图片的显示，尽可能多张突变合成一张显示。23GPU能处理的最大纹理尺寸是 4096 x 4096，一旦超过这个尺寸，就会占用CPU资源进行处理，所以纹理尺寸尽量不要超过这个尺寸45尽量减少试图数量和层次67减少透明的视图(alpha &lt; 1)，不透明的就设置opaque为YES89尽量避免出现离屏渲染(设置view的圆角、遮罩、阴影) 离屏渲染在OpenGL中，GPU有两种渲染方式 on-Screen Rendering：当前屏幕渲染，在当前用于显示的屏幕缓冲区进行渲染操作 off-Screen Rendering：离屏渲染，在当前屏幕缓冲区以外开辟一个新的缓冲区进行渲染操作。 离屏渲染消耗性能的原因： 11、需要创建新的缓冲区232、离屏渲染的整个过程，需要多次切换上下文环境，显示从当前屏幕切换到离屏，等到离屏渲染结束后，将离屏缓冲区的渲染结果显示到屏幕上，又需要将上下文环境从离屏切换到当前屏幕。 哪些操作会触发离屏渲染 11. 光栅化，layer.shouldRasterize = YES;232. 遮罩，layer.mask453. 圆角，同时设置layer.masksToBounds = YES，layer.cornerRadius 大于 06 可以考虑通过CoreGraphice绘制裁剪圆角，或者叫美工提供圆角图片。784. 阴影，layer.shadowXXX，如果设置了layer.shadowPath 就不会产生离屏渲染 二、性能优化–耗电优化app中主要的耗电来源于： CPU处理、网络、定位、图像处理 优化方案： 尽可能降低CPU、GPU功耗 减少使用定时器 优化I/O操作，例如： 11. 尽量不要频繁的写入小数据，最好批量一次写入22. 读写大量重要数据时，考虑用dispatch_io，其提供了基于GCD的异步操作文件I/O的的API。用dispatch_io系统会优化磁盘访问33. 数据量比较大时，建议使用数据库(比如SQLite、CoreData) 网络优化 11. 减少、压缩网络数据22. 如果多次请求的结果是相同的，尽量使用缓存33. 使用断点续传，否则网络不稳定时可能多次传输相同的内容44. 网络不可用时，不要尝试执行网路请求55. 让用户可以取消长时间运行或者速度很慢的网络操作，设置合适的超时时间66. 批量传输，比如：下载视频时，不要传输很小的数据包，直接下载整个文件或者一大块一大块的下载。如果下载广告，一次性多下载一些，然后在慢慢展示。如果下载电子邮件，一次下载多封，不要一封一封的下载 定位优化11、如果只是需要快速确认用户位置，最好用CLLocationManager的requestLocation，定位完后，会自动让定位硬件断电。22、如果不是导航应用，尽量不要实时更新位置，定位完毕就关掉定位服务33、尽量降低定位精度，比如尽量不要使用最高的kCLLocationAccuracyBest44、需要后台定位时，尽量设置pausesLocationUpdatesAutomaticall为YES，如果用户不太可能移动的时候系统会自动暂停位置更新 三、 性能优化 – APP启动优化 APP冷启动可以概括为三个阶段 dyld runtime main dyld runtime APP启动优化方案： 四、 安装包瘦身","link":"/2021/09/08/iOS%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%95%B4%E7%90%86/"},{"title":"hexo搭建流程","text":"使用hexo+github搭建免费个人博客详细教程目录 前言 准备工作 搭建github博客 创建仓库 绑定域名 配置SSH key 测试是否成功 使用hexo写博客 hexo简介 原理 注意事项 安装 初始化 修改主题 上传之前 上传到github 保留CNAME、README.md等文件 常用hexo命令 _config.yml 写博客 写博客工具 如何让博文列表不显示全部内容 最终效果 参考 本文目录（注意无法点击）： 前言体验更加排版请访问原文链接：http://blog.liuxianan.com/build-blog-website-by-hexo-github.html 使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等； 1.1. 准备工作在开始一切之前，你必须已经： 有一个github账号，没有的话去注册一个； 安装了node.js、npm，并了解相关基础知识； 安装了git for windows（或者其它git客户端） 本文所使用的环境： Windows8.1 node.js@5.5.0 git@1.9.2 hexo@3.2.2 搭建github博客2.1. 创建仓库新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？ 由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 几个注意的地方： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效； 创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。 2.2. 绑定域名当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。 首先你要注册一个域名，域名注册以前总是推荐去godaddy，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！ 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下： 然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试： 如果你填写的是没有www的，比如 mygit.me，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://mygit.me 如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://www.mygit.me 如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 http://abc.mygit.me 没问题，但是访问 http://mygit.me ，不会自动跳转到 http://abc.mygit.me 另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。 配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 1$ cd ~/. ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 1ssh-keygen -t rsa -C \"邮件地址\" 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将刚复制的内容粘贴到key那里，title随便填，保存。 3.1. 测试是否成功1$ ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 此时你还需要配置： 1$ git config --global user.name \"liuxianan\"// 你的github用户名，非昵称2$ git config --global user.email \"xxx@qq.com\"// 填写你的github注册邮箱 具体这个配置是干嘛的我没仔细深究。 使用hexo写博客4.1. hexo简介Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 官网： http://hexo.iogithub: https://github.com/hexojs/hexo 4.2. 原理由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 4.3. 注意事项安装之前先来说几个注意事项： 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行； hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的； 4.4. 安装1$ npm install -g hexo 4.5. 初始化在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\\Workspaces\\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 1$ cd /f/Workspaces/hexo/2$ hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： 1$ hexo g # 生成2$ hexo s # 启动服务 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的： hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章： http://blog.liuxianan.com/windows-port-bind.html 第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子： 4.6. 修改主题既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。 个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。 首先下载这个主题： 1$ cd /f/Workspaces/hexo/2$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载后的主题都在这里： 修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。 如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 4.7. 上传之前在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 4.8. 上传到github如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分： 正确写法： 1deploy:2 type: git3 repository: git@github.com:liuxianan/liuxianan.github.io.git4 branch: master 错误写法： 1deploy:2 type: github3 repository: https://github.com/liuxianan/liuxianan.github.io.git4 branch: master 后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行hexo d的话一般会报如下错误： 1Deployer not found: github 或者 Deployer not found: git 原因是还需要安装一个插件： 1npm install hexo-deployer-git --save 其它命令不确定，部署这个命令一定要用git bash，否则会提示Permission denied (publickey). 打开你的git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会： 4.9. 保留CNAME、README.md等文件提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的： 由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。 4.10. 常用hexo命令常见命令 1hexo new \"postName\" #新建文章2hexo new page \"pageName\" #新建页面3hexo generate #生成静态页面至public目录4hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）5hexo deploy #部署到GitHub6hexo help # 查看帮助7hexo version #查看Hexo的版本 缩写： 1hexo n == hexo new2hexo g == hexo generate3hexo s == hexo server4hexo d == hexo deploy 组合命令： 1hexo s -g #生成并本地预览2hexo d -g #生成并上传 4.11. _config.yml这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。 需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。 4.12. 写博客定位到我们的hexo根目录，执行命令： 1hexo new 'my-first-blog' hexo会帮我们在_posts下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。 一般完整格式如下： 1---2title: postName #文章页面上的显示名称，一般是中文3date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改4categories: 默认分类 #分类5tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格6description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面7---89以下是正文 那么hexo new page 'postName'命令和hexo new 'postName'有什么区别呢？ 1hexo new page \"my-second-blog\" 生成如下： 最终部署时生成：hexo\\public\\my-second-blog\\index.html，但是它不会作为文章出现在博文目录。 4.12.1. 写博客工具那么用什么工具写博客呢？这个我还没去找，以前自己使用editor.md简单弄了个，大家有好用的hexo写博客工具可以推荐个。 4.12.2. 如何让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上&lt;!--more--&gt;即可，例如： 1# 前言23使用github pages服务搭建博客的好处有：451. 全是静态文件，访问速度快；62. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；73. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；89&lt;!--more--&gt;10114. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；125. 博客内容可以轻松打包、转移、发布到其它平台；136. 等等； 最终效果： 最终效果可以访问我的git博客来查看效果： http://mygit.me 不过呢，其实这个博客我只是拿来玩一玩的，没打算真的把它当博客，因为我已经有一个自己的博客了，哈哈！正因如此，本文仅限入门学习，关于hexo搭建个人博客的更高级玩法大家可以另找教程。 参考http://www.cnblogs.com/zhcncn/p/4097881.html http://www.jianshu.com/p/05289a4bc8b2","link":"/2021/09/16/hexo%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/"},{"title":"mysql性能优化（内部培训笔记）","text":"mysql性能优化方案存储引擎InnoDB：事务安全、行级锁定、主键索引、支持外键（5.7版本的默认存储引擎，推荐） CSV：表格 Archive：日志系统、历史数据、大量的设备数据采集 Memory：redis，查找热度比较高的数据 MyISAM:5.5以前的默认版本 Federated:分布式、远程获取数据（远程表） 索引排序，随机io变有序io 适合大中型表 MySQL中使用的是B+Tree：所有数据存在叶子节点，左闭合 优化建议：索引列的数据长度能少则少；不一定越多越好；覆盖索引，少用select *；列的离散性要好 explain 执行计划 锁","link":"/2019/12/11/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E5%86%85%E9%83%A8%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0%EF%BC%89/"},{"title":"什么是工作流","text":"工作流一、什么是工作流历史发展： 工作流的理论起源于70年代中期办公的自动化领域。90年代。工作流技术的研究与开发进一步发展。1993年8月，成立第一个工作流技术标准话的工业组织WFMC（工作流管理联盟）。现在，工作流管理系统已由最初的无纸化办公环境，转而成为企业试下业务流程自动执行的必要工具。 定义： WFMC:工作流是指一类能够完全自动执行的经营过程，根据一系列的过程规则，将文档、信息或任务在不同的执行者之间进行传递与执行。 Georgakopoulos:工作里是将一组任务组织起来以完成某一个经营过程（定义了任务的触发顺序和触发条件，每一个任务可以由一个或多个软件系统完成，也可以由一个或一组人完成，还可以由一个或者多个人与软件系统协作完成）。 百度百科：工作流（WorkFlow），就是“业务过程的部分或整体在计算机应用环境下的自动化”。它主要解决的是“是在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促使次目标的实现”。 二、工作流管理系统WFMS工作流管理系统（Workflow Management System，WFMS）是一个软件系统，它完成工作量的定义和管理，并按照在系统中预定义的工作流规则进行工作流实例的执行。工作流管理系统不是企业的业务系统，而是为企业的业务系统的运行提供了一个软件的支撑环境。 三、工作流管理联盟WFMC工作流管理联盟（Workflow Management Coalition，WFMC）是一个由设计工作里和业务流程管理的全球性组织。该组织创建并完善了工作流的相关标准，开阔了相关市场，是唯一的致力于工作流标准化的专业组织。该组织推出了工作流XML（Wf-XML）和XML过程定义语言(XPDL)，现在由超过80种有名的解决方案中使用了这两种语言来存储和交换过程模型。 四、为什么要使用工作流？我们来看一下这样一个业务场景。一个订货流程. （1）.客户提交订单 （2）.业务员执行订单处理 （3）.如果缺货，转工厂生产 （4）.仓库发货 （5）.物流发货 不使用工作流，我们从头开发这个订货流程的业务逻辑，我们需要做哪些事？ 每一个活动点都需要开发交互界面和后台处理程序。 每个活动的流转都需要硬性判断下一步活动节点及其操作人 每次操作都需要维护业务数据和流程的相关数据 结果应该是这样：这还不包括监视、控制、分析流程的部分。 如果我们使用了工作流，结果应该是这样： 这样做的好处有哪些： 使用专门的流程数据系统，维护所有涉及流程流转的数据。 提供“流程设计”工具，帮助用户定义订货流程的模型，而且一般都提供了可视化的界面。 所有的流程都依靠流程引擎来处理，避免了需求更改与硬编码之间的矛盾的产生。 工作流引擎还提供了众多的API，可以很方便的将工作流的管理和有、任务操作完美结合。 总结，在核实的项目中引入工作流技术，对于基础开发来说，有这样的一些好处： 1. 降低开发风险 通过使用诸如活动、流转、状态、行为这样的术语，使得业务分析师和开发人员使用同一种语言交流成为可能。优秀的流程实际建模工具，甚至能使开发人员不必将用户需求转化成详细设计文档。 2. 流程实现的集中统一 应对业务流程经常变化的情况，使用工作流技术的最大好处是使业务流程的实现代码，不再散落在各式各样的业务系统中。 3. 加速开发 开发者不用再关注流程的参与者、活动节点的衔接、流转控制等，因为这些工作很多都被工作流框架接管了。因为开发者开发起来更快、代码出错更少、系统更加容易维护。 4. 提升对迭代开发的支持 工作流管理系统使得业务流程很容易不熟和重新编排，业务流程相关的应用开发可以以一种“迭代/渐进”的方式推进，也就是说工作就技术在某种程度上支持“需求分析不必一次完全成功”。 五、怎么使用工作流？重点：工作流一定要结合业务，单独使用没有任何意义。 一些建议： 明确工作流适用的行业。 明确关键的业务流程。 选定合适的工作流框架。 工作流一定要结合业务使用。 业务流程管理标注（BPMN2.0）官网地址：www.bpmn.org 一、什么是BPM？业务流程管理（Business Process Management，BPM），是一种以规范化的构造端到端的卓越业务流程为中心，以持续的提高组织业务绩效为目的的系统优化方法；是一套达成企业各种业务环节整合的全面管理模式。 四种方法论： 面向工作流 面向文档 面向业务规则 面向EAI（Enterprise Application Integration，企业应用集成） 二、什么是BPMN？业务流程模型注解（Business Process Modeling Notation,BPMN）是业务流程模型的一种标准图形注解。这个标准是由对象管理组（Object Management Group，OMG）来维护。 BPMN的目标是定义可执行的业务流程。 BPMN是一个基于BPM工业接受的标准的流程语言。 三、BPMN2.0（1）基本介绍BPMN2.0版本，允许添加精确地技术细节在BPMN的图形和元素中，同时制定BPMN元素的执行语法。通过XML语言来指定业务流程的可执行语法，BPMN规范已经演变为业务流程语言，基于流程虚拟机（Process Virtual Machine，PVM），可以执行在任何兼容BPMN2.0的流程引擎中，同时依然可以使用强大的图形注解。 流程引擎是根据定义文件的后缀来区分流程定义的。对于BPMN2.0，使用*.bpmn.xml后缀。比如（”jbpm.bpmn.cfg.xml”…） BPMN2.0规范内容 BPMN2-Conformance一致性 Process Modeling Conformance(流程模型一致性) Process Execution Conformance(流程执行一致性) BPEL Process Execution Conformance(BPEL流程执行一致性) Choreography Modeling Conformance(编排模型一致性) BPMN2-Diagram Types 流程图类型 Private Processes 私有流程 Public Processes 共有流程 Choreographies Processes 组合流程 （2）流程元素我们知道，BPMN2.0是通过XML语言来指定业务流程的可执行语法。所以这里有一段最简单的业务流程定义，尽管它还没有内容的。 xml文件： 1&lt;definitions id=\"myProcess\"2 xmlns:xsi=\"http://www.w3.org/2001/XMLShema-instance\"3 xsi:schemaLocation=\"http://schema/omg.org/spec/BPMN/2.0 BPMN20.xsd\"4 xmlns=\"http://schema.omg.org/spec/BPMN/2.0\"5 typeLanguage=\"http://www.w3.org/2001/XMLSchema\"6 expressionLanguage=\"http://www.w3.org/1999/Xpath\"7 targetNamespace=\"http://jpbm.org/example/bpmn2\"8&gt;910&lt;process id=\"My Bussiness Process\" name=\"myBussinessProcess\"&gt;11 ....&lt;!-- 基本结构--&gt;12&lt;/process&gt;1314&lt;/definitions&gt; 流程的根元素是：definitions元素。在命名状态，子元素会包含真正的业务流程定义。每个process子元素，可以拥有一个id（必填）和name（选填）。 （3）基本结构（流程定义的基本要素）遵循BPMN2.0新规范的工作流产品能很大程度上解决此类问题，BPMN2.0相对于旧的1.0规范以及XPDL，BPML和BPEL等最大的区别是定义了规范的执行语义和格式，利用标准的图元去描述真实的业务发生过程，保证相同的流程在不同的流程引擎得到的执行结果一致。BPMN2.0对流程执行语义定义了三类基本要素，他们是业务流程的“三板斧”。 1.Activities活动 Activities活动，在工作流中所有具备生命周期状态的都可以成为“活动”，如原子级任务（Task），序列流（Sequence flow），以及子流程（Sub-Process）等。 Task和Sub-Process的符号表示参考： （1）Sequence Flow序列流序列流是事件，活动和网关之间的连线，显示为一条实线 带有箭头， 每个顺序流都有一个源头和一个 目标引用，包含了 活动，事件或网关的id。 例如xml中定义一个序列流： 1&lt;sequenceFlow id=\"myFlow\" name=\"My Flow\"2 sourceRef=\"sourceId\" targetRef=\"targetId\" /&gt; 当有多个外向序列流的行为。如 此时应该在每条序列流上设置流程参数，根据参数条件决定执行哪一条序列流；或者使用网关的形式予以拆分。 默认序列流 活动（比如用户任务）和网关（比如唯一网关）可以使用默认序列流流。 默认序列流只会在活动或网关的所有其他外向序列流的condition条件为false时才会使用。 默认序列流图形像是序列流多了一个斜线标记。 默认序列流通过指定活动或网关的 ‘default’ 属性来使用。 序列流是BPMN2.0中的Connecting Flow Objects（连接流对象），除此之外，还有Message Flow（消息流）、Associations（关联关系）、Data Associations（数据关联）。 Message Flow（消息流） Message Flows 用虚线空心箭头表示，用于2个分开的流程参与者直接发送或者接收到的消息流. Associations（关联关系）、Data Associations（数据关联） Associations 用点状虚线表示，用于显示活动的输入输出，关联上的箭头表示流动方向（比如：数据）。 （2）Task任务 任务是工作流中的原子活动。当流程中的工作不能被细分为更精细的细节时，将使用任务。通常，最终用户和/或应用程序在被用来执行任务。 有哪些任务语义： 以下对相关任务做简单进行说明： ①MunualTask手动任务 手动任务是不受任何业务流程引擎管理的任务。它可以被认为是一个非托管任务，不受管理的意义在于业务流程引擎不跟踪此类任务的开始和完成。此类任务不参与实际工作流流转。常用于诸如物流系统中的装货，运顺等任务的描述。 ②UserTask用户任务 UserTask用户任务是典型的“工作流”任务,也可以叫“人机交互任务”。人员在软件应用程序的帮助下执行任务。任务的生命周期有软件组件（任务管理器）管理，通常在进程的上下文中执行。主要用来描述人为在软件系统中进行诸如任务明细查询、填写审批意见等业务行为的操作，流程引擎流转到此类节点时，系统会自动生成被动触发任务，需人工响应后才能继续向下流转。 用户任务可以把任务分配给个人，组，角色组来执行，在定义用户任务时指定，完成相应工作后，用户任务完成。 ③ServiceTask服务任务 ServiceTask服务任务是某种使用了服务的任务，可以是Web服务或自动应用程序。它是一个自动活动，它会调用一些服务，比如web service、java service等等。 通常在工作流流转的过程中会涉及到与自身系统服务的API调用或外部服务调用的情况，此类任务往往由一个特定业务服务功能的Java类来承担，与UserTask不同，流程引擎经此节点会自动调用Java类中定义的方法，方法执行完毕自动向下一流程节点流转。另外，此类任务还可充当“条件路由”的功能对流程流转可选分支进行自动判断。常用于业务逻辑API的调用。 此外，当服务任务引用一个操作时，会引入以下约束：1.服务任务只有一个inputSet和最多一个outputSet。它具有单个数据输入，其ItemDefinition等同于由相关联操作的inMessageRef属性引用的消息定义的数据输入。2.如果操作定义输出消息，则服务任务具有单个数据输出，其具有与由相关联的操作的outMessageRef属性引用的消息定义的ItemDefinition相同的数据输出。使用服务的实际参与者可以通过使用过程的定义协作中的消息流将服务任务连接到参与者来识别 我们来看一个例子： 在XML文件中定义一个服务任务： 1&lt;serviceTask id=\"MyServiceTask\" name=\"My service task\"2 implementation=\"Other\" operationRef=\"myOperation\" /&gt;3&lt;!-- 4implementation:此属性指定将用于发送和接收消息的技术。有效值是“## unspec”，用于使实现技术打开，Web服务技术的“## WebService”或标识任何其他技术或协调协议的URI。 Web服务是默认技术。5可选值是WebService, Other或者Unspecified。 这里选择Other（java调用）。6operationRef：此属性指定由服务任务调用的操作。7--&gt; 一个接口实例： 1&lt;interface id=\"myInterface\"2 name=\"org.jbpm.MyJavaServicek\"&gt;3 &lt;operation id=\"myOperation\" name=\"myMethod\"&gt;4 &lt;inMessageRef&gt;inputMessage&lt;/inMessageRef&gt;5 &lt;outMessageRef&gt;outputMessage&lt;/outMessageRef&gt;6 &lt;/bpmn:operation&gt;7&lt;/interface&gt;8&lt;!-- 9服务任务将调用一个操作，operation的id 会在operationRef属性中引用10每个操作都至少有一个 输入信息，并且最多有一个 输出信息。11对于Java服务，接口的名称用来 指定java类的全类名。操作的名称 用来指定将要调用方法名。 输入/输出信息表示着java方法的参数/返回值12--&gt; ④RecieveTask接收任务 接收任务是一个简单任务，它会等待对应消息的到达。一旦接收消息，任务完成。接收任务通常用于启动进程。可以通过使用接收任务连接到参与者来识别接收到消息的实际参与者。 当流程达到接收任务，流程状态会保存到数据库中。 在任务创建后，以为着流程会进入等待状态，直到引擎接收一个特定的消息，这会触发流程穿过接受任务继续执行。 ⑤SendTask发送任务 SendTask发送任务是一个简单的任务，旨在向外部参与者发送消息。消息发送完毕后，任务完成。可以通过使用发送任务连接到参与者来识别发送消息的实际参与者。 ⑥ScriptTask脚本任务 脚本任务是一个自动活动，由业务流程引擎执行。建模器或实现者使用引擎可以解释的语言定义脚本。当Task启动时，引擎将执行该脚本。脚本完成后，任务也将完成。 目前支持的脚本类型有三种：JUEL（JSP EL）、Groovy、JavaScript。在Activiti中还支持Shell Task，与Script由类似的功能。 ⑦Business Rule Task业务规则任务 业务规则任务为流程提供了一种项业务规则引擎提供输入并获取业务规则引擎可能提供的计算输出的机制。该任务允许进程向“业务规则引擎”发送数据并从其接收数据。 （2）Sub-Process子流程(内嵌子流程)子流程是一个活动，其内部细节使用活动，网关，事件和序列流进行建模。 子流程是流程内的图形对象，但也可以“打开”以显示较低级别的流程。 子流程定义可用于属性可见性，事务范围，异常处理，事件或弥补的上下文范围。 子流程的第一目的是实现流程的“继承”，意味着 设计者可以创建多个不同“级别”的细节。顶级视图理解为做一件事情的最高级别方式，最低的级别 就关注具体细节。 这是一个折叠子流程： 这是一个展开的子流程 下面我们来看一个例子，在这个模型里，只有最高级的步骤显示出来。 实际的实现”Check credit”步骤隐藏在折叠子流程中。在实际与用户交流业务的过程中，落实主要的业务流程，再去落实每个可能涉及的子流程业务细节。 “Check credit”子流程展开是这样的： 这个流程用xml文件描述就是： 1&lt;process id=\"embeddedSubprocess\"&gt;2 &lt;startEvent id=\"theStart\" /&gt;3 &lt;sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"receiveOrder\" /&gt;4 &lt;receiveTask name=\"Receive order\" id=\"receiveOrder\" /&gt;5 &lt;sequenceFlow id=\"flow2\" sourceRef=\"receiveOrder\" targetRef=\"checkCreditSubProcess\" /&gt;6 &lt;subProcess id=\"checkCreditSubProcess\" name=\"Credit check\"&gt;7 ...&lt;!-- 子流程细节--&gt;8 &lt;/subProcess&gt;9 &lt;sequenceFlow id=\"flow9\" sourceRef=\"checkCreditSubProcess\" targetRef=\"theEnd\" /&gt;10 &lt;endEvent id=\"theEnd\" /&gt;11&lt;/process&gt; 再看一个例子： 扩展的子流程可以用作以较不混乱，更紧凑的方式显示一组并行活动的机制。活动“C”和“D”包含在未标记的扩展子流程中。这两个活动将并行执行。 BPMN指定了五种类型的子流程的标准标记。 （折叠）子流程标记，可以与四个其他标记组合使用：循环标记、多实例标记、弥补标记、Ad-Hoc标记。在所有组合中，折叠的子流程可能有一到三个这些其他标记，除了循环和多实例不能同时显示。 下面是组合使用的部分情形： 除此之外，还有其他的子流程类型，比如Event Sub-Process（事件子流程）、Transaction Sub-Process(事务子流程)。 Event Sub-Process（事件子流程） Transaction Sub-Process(事务子流程) 2.Gateways网关网关用于控制序列流在流程内的合并和拆分的相互作用，用来控制流程流转的指向的。如果不需要控制流程则不需要网关。更确切的说，当一个token（令牌）到达一个网关，它会根据网关的类型进行合并和拆分。 网关的符号表示参考： 所有的网关类型，都可以设置gatewayDirection。取值： unspecificed (默认)：网关可能拥有多个 进入和外出顺序流。 mixed：网关必须拥有多个 进入和外出顺序流。 converging：网关必须拥有多个进入顺序流， 但是只能有一个外出顺序流。 diverging：网关必须拥有一个进入顺序流， 和多个外出顺序流。 ①Exclusive Gateway排它网关（互斥网关） 排它网关表达了一个流程中的唯一决策。 根据定义在顺序流中的条件,选择符合条件的下一流程流向。 我们来看一个例子： 根据amount变量的值， 会选择唯一网关外向的三个外向顺序流 中的一个。 一般情况下，排它网关需要所有外向顺序流上都定义条件。 但是，有一种例外是默认顺序流， 在网关定义时使用default 属性来引用一个已存在的顺序流的id。当其他外向顺序流的条件都执行为false时，这个顺序流就会被使用。 ②Exclusive Gateway并行网关 并行网关用来切分或同步相关的进入或外出顺序流。 我们来看一个例子： 注意：当流程启动时，在流程启动后， ‘prepare shipment’ 和 ‘bill customer’用户任务都会被激活，同时往下执行。当到达合并节点时，需要两个流程实例都完成，才能继续往下执行。 ③Inclusive Gateway包容网关 Inclusive Gateway包含网关， 被用来 进行“条件性”切分或汇聚顺序流。它基本的行为就和一个并行网关一样， 但是它也可以统计条件，在外出顺序流上（切分行为） 和计算，如果这儿有流程离开，可以到达网关（合并行为）。 建议：最佳实践是让包含网关成对使用。 我们看下面这个例子： 针对以上的例子，作出解释如下： 现金多于10000，不是国外银行：只有 “Large deposit” 任务会被激活。 现金多于10000，是国外银行： “Large deposit” 和 “Foreign deposit” 任务会被激活。 现金少于10000，是国外银行： 只有 “Foreign deposit” 任务会被激活。 现金少于10000，不是国外银行： 在这种情况 所有表达式的结果都是false，默认的顺序流会被选择。 在这个例子中国，这意味着”Standard deposit”任务会被激活。 无论在包含网关之后多少任务被激活，右侧的聚合包含网关会等到左侧的包含网关所有外向顺序流到达合并网关。和其他网关类型一样，包含网关类型可以同时拥有合并和切分行为。 在这种情况下，包含网关将先等到所有分支流程到达， 3.Events事件事件在实际的每个业务流程中都会使用。 事件让业务建模工具用很自然的方式描述业务流程。 比如 ‘当我接收到客户的订单，这个流程就启动’， ‘如果两天内任务没结束，就终止流程’ 或者‘当我收到一封取消邮件，当流程在运行时， 使用子流程处理邮件’。 注意典型的业务通常使用这种事件驱动的方式。人们不会硬编码顺序创建， 但是他们倾向于使用在他们的环境中发生的事情（比如，事件）。 为了覆盖可能的事情， 在业务环境中可能出现的情况,在BPMN规范中，描述了很多事件类型. (1)Start Event开始事件（启动事件）开始事件指定流程将在哪里开始。在序列流方面，启动事件启动进程的流程，因此不会有任何进入的序列流。 Start Event可以用于这些类型的流程： 顶级流程 嵌入式的子流程 全局流程 事件子流程 一些建议和说明： 启动事件的使用对于每个流程的每个级别都是独立的。 如果流程复杂和/或启动条件不明显，则建议使用启动事件。 如果不使用启动事件，则该进程的隐式启动事件不应该具有触发器。 如果有结束事件，则必须至少有一个结束事件。 不同类型的流程可以使用的启动事件的类型不同： ①顶级流程Top-Level Process Start Event Types Trigger Mark None空启动事件 Message消息启动事件 Timer定时启动事件 Conditional条件启动事件 Signal信号启动事件 Multiple多个启动事件 Parallel Multiple并行多个启动事件 ②嵌入式的子流程Start Events for Sub-Processes Trigger Mark None空启动事件 ③事件子流程Start Events for Event Sub-Processes Trigger Mark Message消息启动事件 Timer定时启动事件 Escalation升级启动事件 Error错误启动事件 Compensation赔偿启动事件 Conditional条件启动事件 Signal信号条件启动事件 Multiple多个条件启动事件 Parallel Multiple并行多个启动事件 (2)End Event空结束事件结束事件指定了流程实例中一个流程路径的结束。 图形上，它看起来就是一个圆 拥有厚边框（可能） 内部有小图标。 图标指定了结束的时候 会执行哪种操作。 当流程到达事件时，不会抛出任何信号。 空结束事件可以像下面一样定义，id是必填的，name是可选的。 1&lt;endEvent id=\"end\" name=\"myEnd\" /&gt;2` 下面的例子显示了只使用空开始和结束事件的流程： 1&lt;process id=\"noneStartEndEvent\" name=\"BPMN2 Example none start and end event\"&gt;23 &lt;startEvent id=\"start\" /&gt;45 &lt;sequenceFlow id=\"flow1\" name=\"fromStartToEnd\"6 sourceRef=\"start\" targetRef=\"end\" /&gt;78 &lt;endEvent id=\"end\" name=\"End\" /&gt;910&lt;/process&gt; (3)Terminate End Event终止结束事件终止和空结束事件的区别是 实际中流程的路径是如何处理的（或者使用BPMN 2.0的术语叫做token）。 终止结束事件会结束整个流程实例，而空结束事件只会结束当前流程路径。 他们都不会抛出任何事情 当到达结束事件的时候。 一个终止结束事件可以像下面定义。id是必填的，name是可选的。 1&lt;endEvent id=\"terminateEnd\" name=\"myTerminateEnd\"&gt;2 &lt;terminateEventDefinition/&gt;3&lt;/endEvent&gt; 终止结束事件被描绘成结束事件一样（圆，厚边框）， 内部图标时一个完整的圆。在下面的例子中，完成task1 会结束流程实例，当完成task2时只会结束到达结束事件 的流程路径，只剩下task1打开。 （4）除了三类基本执行语义的扩展内容1.Data数据 ①.Data Objects 数据对象 ②.Data Inputs 数据输入 ③.Data OutPuts 数据输出 ④.Data Stores 数据存储 2.Swimlanes泳道①.Pools 泳池 描述流程中的一个参与者。可以看做是将一系列活动区别于其他池的一个图形容器，一般用于B2B的上下文中。 ②.Lanes 泳道 泳道就是在池里面再细分，可以是垂直的也可以是水平的，泳道也用于组织和分类活动。 3.Artifacts工件①.Group 组 ②.Text Annotation 文本注释 （5）一个具体的例子这是一个常见的请假业务流程定义。 这个例子中所所用流程定义说明： （6）BPMN2.0术语附件：BPMN2术语表","link":"/2021/10/12/%E4%BB%80%E4%B9%88%E6%98%AF%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"title":"开篇","text":"长风破浪会有时，只怪云帆济沧海 自己本人卢希强，别名小希，28岁，居住在武汉，一个2015年毕业的软件开发工程师，四年多时间沉心工作，职业搬砖，知识零碎，回头皆空。兴趣爱好广泛，一切运动、唱歌、游戏……无奈时间不允许。回归近三十年人生路，波澜不惊，平平淡淡，车房都有，即将结婚。特开博客记录生活工作点滴。 生活 不求大富大贵，但求平安风顺 结婚在即，奔三冲刺，平平安安才是真。 工作 Stay hungry, stay foolish 专职于iOS开发，四年半开发经验，工作之余接触关于web端的相关知识。感觉技术日新月异，不往前便落后，所以坚持学习、坚持笔记、坚持coding吧。 目标 先定个小目标，赚他个一个亿？ 1、学习flutter,copy一个完整的公司项目； 2、减肥30斤； 3、学习SwiftUI、vue等； 4、每月一本书； 5、赚钱赚钱。 最后 会当凌绝顶，一览众山喜爱 祝自己工作顺利，升职加薪，生活幸福，股市长虹！ 2020为了生活，冲鸭！","link":"/2019/12/02/%E5%BC%80%E7%AF%87/"},{"title":"工作流设计","text":"7个方面总结：审批工作流设计工作流是后台系统的核心和灵魂，而审批则是工作流中的最基础的应用场景。在公司管理和运转中引入审批工作流，替代原本的纸质申请和审批，可以达到以下目标： 提高公司的运转效率 公司管理制度规范化 系统留档，便于追溯 环保 本文将从角色、内容、流程、动作、权限、配置、效率7个方面，对审批工作流的产品设计进行总结。 一. 角色 在一个公司中，每个人都会有自己的岗位职责和层级之分，不同的岗位和层级定位不一样，需要完成的任务也不一样。在审批流程中，我们只抽象划分为两类： 角色1：发起人 审批的发起人需要完成的主要是事务性、操作性的工作，同时也是一个审批流程的Owner，是最关心审批进展的人。因此在发起人的角度，在创建完审批事项后，还需要完善相关信息、催促审批人及时审批、处理驳回修改意见、重新提交等。发起人角度设计的要点总结如下： 兼容统一发起入口和业务场景触发 常用的审批事项要方便找到 有统一汇总的审批管理页面 角色2：审批人 审批人在流程中需要完成的主要是决策性的工作，因此在审批人的视角，内容和操作都应该尽量精简： 只看到最重要的信息，避免信息过多影响判断 只进行必要操作，不能有过多选择或过多输入，影响决策效率 统一的页面进行审批操作和管理 需要有审批历史，以便追溯 二. 内容 \\1. 提炼最小集合 根据审批事项的不同，需要流转的内容也是不同的。对于审批流程的设计来说，需要在实际业务中提炼出最核心的内容，一则可以减轻发起人的工作负担（发起一个审批要填一堆的资料相信没人会开心），二则可以提高决策的准确性和效率。 例如一个请假审批流程，核心就是请假时间、事由和请假类型；而一个立项投决的审批，则需要重点展示立项会的表决结果，同时还需要把会议记录做为附件带上，以便在必要时可以查看，在交互上，这里同样需要注意内容的归类、收纳。 设计要点总结如下： 内容尽可能精炼 有些内容是必要的，但系统可以自行获取就不要让发起人再输入一遍 预置常用的内容，用选择的方式替代输入的方式，同时也提高了内容的规范性 \\2. 查看和修改 在审批的过程中，有时候需要让不同的审批人查看不同的内容，且限定有些人有修改权限而有些人只有只读权限，这都会在后面的“权限”里总结。 三. 流程 1. 自主选定审批人流程 这是一种比较轻量、灵活的审批流程形式，适用于公司规模不大、流程没有标准化的情况。要点是发起人发起一个审批事项并提交时，需要自行选择下一个环节的审批人。而下一个环节的审批人审批通过后，可以选择继续流转到再下一个人去审批，或者结束这个流程。 \\2. 串行流程 串行流程就是每一个审批环节的人审批通过后，才会进入到下一个环节。每个环节的驳回，可以根据业务需要，设计成驳回到发起人、驳回到上一个环节或驳回到指定环节重新审批，或兼而有之，做为选项供审批人选择。 \\3. 并行流程 并行流程是一个审批环节需要几个人或角色审批通过才算通过，可以有以下两种方式： 任意一个人审批通过即进入下一环节 必须所有人审批通过才进入下一环节 上述第一个方式比较好理解，第二个方式和串行流程容易混淆，即同样是要多个人审批，到底是一个接一个、还是同时通过才算通过？到底用哪种方式，区别是审批人是不是同一个级别，并行的方式其实类似于同级别的会签，而串行方式适合有上下层级关系的情况。 并行流程的驳回则相对简单，一般是设计成有一个人驳回则该环节即算驳回。 \\4. 条件触发流程 条件触发流程在审批工作流中也比较常见，设计上就是某个审批环节要由谁/或哪个角色审批，需要取决于条件判断。例如金额低于1万元由财务总监审批通过后即结束，金额在1万元以上则由副总裁审批通过后即结束。 \\5. 混合流程 混合流程顾名思义就是混合了以上几种流程，还是以上述金额审批为例，我们修改成：金额低于1万元的，由财务审批通过后即结束；金额在1万元到10万元的，需要先由财务审批，之后交由副总裁审批通过后即结束；金额高于10万元的，需要由董事长和总裁一同审批通过后才结束。 四. 动作 \\1. 通过 通过动作由审批人操作，是否需要输入通过原因、通过原因是否必填需要根据实际业务情况决定。要点总结如下： 简单申请不需要填写通过原因，或者原因选填 通过原因需要填的话，可用于反馈或激励发起人的情况 \\2. 驳回修改 驳回修改动作由审批人操作，和通过不同，为了让发起人知道如何修改，驳回原因一般需要设定成必填项，否则发起人或上一个审批环节的人不知道为何被驳回、以及要如何修改。 驳回修改可根据业务需要，在以下逻辑中选择： 驳回到发起人 驳回上一环节 驳回到选定的之前的某个审批环节 \\3. 重新提交 重新提交由发起人操作，和驳回修改是一一对应的。设计上要注意，审批人审批重新提交的内容时，需要附带上一次驳回修改的原因。 \\4. 取消 取消动作可选，一般来说是发起人取消，而不是审批人取消，原因如下： 审批人只关心一个审批事务过来后，判断并决策是通过还是驳回 取消和驳回含义容易混淆，区分不开 在设计上，我们还可以做到发起人是否可取消可由配置项进行配置。 五. 权限 权限的控制贯穿在审批流程的方方面面，上述的角色、内容、流程和动作都会涉及到权限的控制。权限体系的设计是一个大工程，在审批流程中，采用基于角色的访问控制体系（RBAC）是一个不错的选择： “基于角色的访问控制体系，包括用户、角色、目标、操作、许可权五个基本数据元素，每个角色至少具备一个权限，每个用户至少扮演一个角色，可以对完全不同的角色分配完全相同的访问权限，用户和角色是多对多的关系。” 设计要点总结如下： 操作和许可权内容，可区分为功能权限和数据权限 什么人可以发起什么审批，由功能权限控制 什么人/角色在整个审批流程中可见什么数据，由数据权限控制 什么人/角色可以审批什么环节，由独立的审批配置控制，下一节会进行阐述 关于权限可以参考笔者另一个篇文章：面向中小企业SaaS的权限管理系统 六. 配置和扩展性 审批工作流的配置灵活度和开发复杂度成反比，具体要灵活到什么程度，需要由业务需求决定。一般针对公司开发的中后台系统，灵活性相对较少，而面向多个公司的商业化的系统，则灵活性要求大大提高。配置的灵活性体现在以下方面： 审批流程的类型可修改 具体的审批环节可增删改 各个环节审批人/角色可配置 审批相关的权限可变更 七. 效率 工作流的核心目标是提高企业运行效率，如果线上审批流程效率还不如原来的纸质操作，那这个流程的设计就是失败的，也失去了意义。因此，在完成整个审批流程的设计之后，我们还需要花大精力对流程的效率进行审视和优化。对于审批流程效率的提升，总结的经验点如下： 审批的操作尽可能精简，且操作含义明确 只要求输入必要的表单 待审批事项及时通知到审批人 审批进展及时通知发起人 发起人可选择主动催促审批人 做好下一步操作的引导 总结 审批流程是中后台工作流的基础应用，我们在设计的过程中，把握的核心要点是“提高效率，规范管理”，在设计过程中要时时回头审视，以免脱离了这个最重要的目标。","link":"/2021/09/17/%E5%B7%A5%E4%BD%9C%E6%B5%81%E8%AE%BE%E8%AE%A1/"},{"title":"工作流程引擎","text":"0、为什么要使用工作流引擎假定我们有一个支付订单状态需要维护，它的状态图如下： 它的状态跃迁自左向右，清晰名了，而且没有处理角色的概念，此时我们使用代码控制好状态流转即可，无需使用框架。 再来看另外一个场景，假定我们有一个企业内部采购订单，它的状态图如下： 这个采购订单的状态复杂多变，状态的转换不稳定性很强，随时有可能增加新的状态；而且不同状态的处理人也是不同的，存在权限管理功能，若此时我们仍然使用一个状态字段来维持状态变更，无疑会困难重重。 工作流引擎就是为了解决这类问题而生的，我们可以观察当前实体(如支付订单、采购订单)是否具有如下特性，由此来确定是否需要引入工作流引擎。 状态的个数及其稳定性，个数多且不稳定，适合使用工作流引擎。 每个状态的处理人，处理人角色多且不稳定，适合使用工作流引擎。 工作流引擎实际上是放大了状态管理的功能，它根据既有流程图（基于 BPMN2.0 规范）的指示，指定每一次状态跃迁的处理角色，在状态变更时持久化评论、表单、附件等数据，保存了完整处理轨迹。 工作流引擎最常见用于审批流程中，现在一线互联网公司也开始使用，并有快速推广的趋势，复杂繁多的业务流程如果采用 if else 实现那将是崩溃的，代码不可维护，业务流程在代码中可读性很差，所以高人设计了业务流程模型图示 BPMN2.0 规范，我们要做到就是把业务场景抽象为标准流程图，把流程图丢到流程引擎中按流程定义约定逐步流转，很显然扩展性和业务可描述性会好很多，所以工作流引擎主要用于解决复杂的业务，目前经常被提起的中台系统抽象业务为服务，也涉及大量智能的业务流程引擎做支撑。 1、工作流概念1.1 流程的定义从最朴素和最直接的角度看，我们按照条理和顺序做事情的过程，就是流程。 流程之父迈克尔.哈默是这样定义的： 流程是把一个或多个输入转化对顾客有价值的输出的活动。 李.克拉耶夫斯基和拉里.里茨曼在其《运营管理–流程与价值链》第 7 版中是这样定义的： 流程是一种或一组活动，这些活动利用一个或多个输入要素，对起进行转换并 3 使其增值，向顾客提供一种或多种产出。 我们的理解是： 流程就是一组活动按照一定的顺序组成的序列流，其顺序可能是串行的、并行的，或者两者的组合模式，例如面包制作流程中的“混合原料”，“揉面醒发”，“整形”，“烘烤”等活动。 综上所述，流程一般具备六个要素：输入、活动、活动间的相互作用、输出、流程的服务对象和价值。 如下图所示： 1.2 工作流参考模型1993 年，工作流管理联盟（WfMC）成立，接着发布了著名的工作流参考模型（如下图所示）及接口规范。2002 年 10 月 25 日，WFMC 发布了 XPDL 1.0 规范(WFMC-TC-1025)、规范流程定义的 XML 描述形式。 WFMC 定义的 5 类接口的功能： 接口 1：过程定义输入输出接口，工作流服务和工作流建模工具间接口，包括工作流模型的解释和读写操作； 接口 2：客户端函数接口，工作流服务和客户应用之间的接口，这是最主要的接口规范，它约定所有客户方应用与工作流服务之间的功能操作方式； 接口 3：激活应用程序接口，工作流机和直接调用的应用程序之间的直接接口； 接口 4：工作流执行服务之间的互操作接口，工作流系统之间的互操作接口； 接口 5：系统管理与监控接口，工作流服务于工作流管理工具之间的接口； 1.3 主要应用场景 一般 OA 都内置有一个轻量级的审批流引擎，适用于办公协同领域。BPM 呢，在中国主要适用于流程化信息化程度较高的制造业、零售业、房地产、金融业和政府事业单位，可以应用在企业战略、运营、管理等从上到下的各个场景。BPM 主要为这些行业中体量较大的公司客户服务。 2、 工作流规范简介20 世纪 70 年代中期，工作流出现并运用于办公自动化领域，使流程管理技术第一次有了系统的技术规范。20 世纪 80 年代 初期，工作流伴随着 OA 系统走向商用，但是应用范围有限。至 80 年代后期，OA 系统的研究被群件和工作流管理系统所代替。20 世纪 90 年代以后，相关技术逐渐成熟，工作流管理联盟(WfMC)成立并发布了工作流参考模型。进入 21 世纪， BPM 更进一步发展。SOA 的出现使得流程管理技术从工作流转向业务流，基于此的一系列规范也相应被推出。 发展到目前，BPMN 规范最完善，现在主流工作流引擎产品，大多基于 BPMN2.0 规范实现的，这里只介绍 BPMN2.0 规范。 2.1 BPMN2.0 规范业务流程模型和标记法（BPMN, Business Process Model and Notation）是一套图形化表示法，用于以图形的方式详细说明各种业务流程。 它最初由业务流程管理倡议组织（BPMI, Business Process Management Initiative）开发，名称为”Business Process Modeling Notation”，即“业务流程建模标记法”。BPMI 于 2005 年与对象管理组织（OMG, Object Management Group）合并。2011 年 1 月 OMG 发布 2.0 版本（时至今日，没人会用 1.0 版本了），同时改为现在的名称。 BPMN2.0 规范的实现，实质上是一个按照特定规范编写的 XML 文件，使用特定的 BPMN 设计器，即可以图形化的形式查看和编辑该文件。Camunda，Activiti，Flowable 等主流的 java 开源流程引擎，以代码的形式实现了这套图形化表示法，使任务的流转依赖图形，而非具体的实现代码。 UML vs BPMN UML 和 BPMN 之间唯一的正式关系是 OMG 维护两个开放标准。 UML(统一建模语言)作为一种可视化的建模语言，其中的活动图也适用于流程建模，但其支持深度不够。 BPMN 诞生时间晚于 UML，据称从某种意义上讲，UML Activity Diagrams 是 BPMN 的一个子集，也是 BPMN 的历史前身。 BPMN2.0，流程主要涉及的对象： 如上图所示，BPMN2.0 规范主要包含了三个部分 Activities(活动)、Gateway(网关)、Event(事件)。 下图在线流程设计器，设计的流程图效果如下： 2.2 流程技术发展历史流程管理思想及方法论的发展，深刻影响着流程技术的发展，而流程技术的发展也反过来促进了流程管理思想的发展，二者相辅相成，互相促进。流程技术的发展大概经理了三个发展阶段： 工作流技术阶段 工作流技术在以“信息技术驱动的技术流程自动化”管理思想为主导的时代进入了新的热潮。此阶段的主要技术是 OO 技术、Web 1.0 及 ERP、OA 等，而 ERP 及 OA 都是基于工作流技术的应用。 BPM 技术阶段 在“业务流程为主导的管理思想”时期，业务流程管理系统/套件（BPMS）出现了，BPMS 所要解决的问题是怎么以业务流程为中心全面串联企业的经营活动。要达到这个目标，首先要全面梳理和设计企业的所有业务流程，最终通过 BPMS 进行落地实现。在这个时期，出现了 Web 服务，SOA 和 ESB（企业服务总线）等技术。 BPM 治理阶段 为了提高 BPM 实施的成功率及投资回报率而引入了一些新的管理思想和技术，这些管理思想及技术终极目标还是围绕 BPM 的。 流程规范、技术进展技术路线图 3、工作流和 BPM 的区别啥叫 BPM，来点小科普。讲 BPM，我们首先就要清楚什么叫业务流程，或者说什么是业务，然后才能明白什么叫业务流程管理。 业务流程简单来说就是业务处理流，或者说业务的流转过程。这里重要的不是“流程”二字，而是“业务”二字。注意，类似于请假不能算是企业的“业务”。例如，你去见一个新客户，客户问你，你的公司主要做什么业务？你总不能说我们公司是做“请假”业务的吧？那么到底业务流程关注的是什么样的业务呢？一句话，对顾客产生价值的流程就是我们这里所关注的“业务流程”。 产品和服务的设计与开发 产品和服务的市场营销与销售 产品和服务的交付 客户服务管理 业务流程管理是一种以规范化地构造端到端的卓越业务流程为中心，以持续地提高组织业务绩效为目的的系统化管理方法。 3.1 定义不同工作流系统是指通过电子版代替纸质版帮助企业处理所有内部事务，实现各种审批工作，支持协同工作中的一部分。 BPM 系统即业务流程是指企业、政府以及其它各种组织,为了达到其业务目标,利用技术实现业务自动化，协助企业业务发展。 3.2 流程架构不同工作流系统是从企业内部出发，单一只对企业本部门或者本业务的业务需求，部门与部门之间流程无法衔接，信息的共享和传递困难，存在大量流程断点。 而 BPM 系统可以实现各流程之间可以衔接、协调，避免了流程孤岛的产生。同时，在激烈的市场竞争环境下，对提高整个业务流程运行的效率、成本、等满足客户的需求。 3.3 应用不同工作流系统是为帮助企业解决“办公自动化”、“流程自动化”而诞生的应用技术，却不对业务流程进行优化的，功能较单一。 而 BPM 系统可以对业务全过程进行管理，如分析，整合、协助等，确保工作流能够按计划实施。 3.4 集成功能不同工作流系统只能对单一业务进行处理。 BPM 可以帮助软件开发人员来集成第三方的应用软件。例如 ERP、PLM、财务软件等可以通过 BPM 平台进行集成。 3.5 流程的持续改进不同工作流系统由于业务人员对其缺少认识和关注，及工作流系统本身缺少对内部业务的连接，因此很难对流程进行持续改进。 而 BPM 系统由于可以帮助业务人员密切关注信息系统内嵌流程与其它业务流程衔接关系，可以及时进行流程的调整、改进等，最终是为了优化、提升和自动化处理业务流程。 总之，随着信息技术的高速发展，业务不断扩大，工作流技术一直是企业信息化建设不可或缺的一部分。不管是办公自动化 OA 系统，还是企业 ERP 系统的部署，利用工作流系统和 BPM 系统都是可以提高企业运行效率的。 4、市场上工作流厂商分类只提供工作流产品。这类厂商产品单一，尽管产品质量能够得到保证，但是发展最为困难。技术在这里不是第一竞争力。 提供工作流产品和快速开发平台。这类厂商在工作流的基础上提供开发框架进一步简化编程，相比第一类厂商会更有竞争力，但是其发展受到系统集成商的限制。 提供工作流产品和业务套件/平台，同时自己接项目。与单纯的快速开发平台相比，业务平台显然站在了一个更高的层次上。在软件开发中，最大的浪费往往并不在于技术本身，而是在于对业务的不熟悉，在于核心领域模型的频繁变动。对用户而言，根据需要选择合适业务平台和相关服务无疑能够产生最大的价值。这是目前生存状态比较好的厂商，多是老牌厂商或是有充足的资金。业务套件/平台能够给用户提供最大的价值。在任何时候，直接面对最终用户就是王道。 工作流厂商的机会在哪里？ 最重要的就是，将产品面向最终用户。 提供行业应用业务套件。能够做到对某类应用的快速实施，很多功能能够做到开箱即用。 转向 BPMS。这个需要两方面的努力：一是业务方面需要与业务流程咨询公司进行合作；二是产品需要增加 BPMS 特性。 自己做项目。大公司靠财务，小公司靠销售。 5、流程引擎发展趋势5.1 趋势一：中台化对于信息化软件的演进，从流程线和开发部署方式两条线来看，分别从轻到重和从重到轻发展，交汇于数字中台。从部署 开发一线来看，传统的开发部署模式时间长、成本高、系统割裂，不能满足企业实现“成本效益”的需求，因而数字中台 转型成为必然的选择。 5.2 趋势二：低代码需求端的 复杂多变对软件开发提出了新的要求，市场要求软件的开发的速度越快越好、交付时间越来越短，“低代码”应运而生。 BPM 在未来也将充分与低代码相结合，BPM 的低代码化主要包含设计端的应用。开发人员寻找通用的开发活动，然后为 所有环节构建一个基本代码并将它们封装在某个可视化的模块里。基于这些模块，业务人员就可以通过拖拉拽的方式，在 可视化的设计器上像“搭积木”一样，对表单、流程和应用进行搭建。这种方式极大地提高了软件开发的敏捷性，同时实 现了“以客户为中心”，使公司更好的响应市场。 5.3 趋势三：智能化业务流程管理（BPM）已成为企业内部优化的选择。流程的优化通过节省时间并降低成本为公司带来竞争优势，使员工更 有效地工作。随着市场的成熟度日益提高，各种新兴技术不断发展，BPM 自身也需要与时代结合，不断发展。未来 BPM 将进一步与 RPA（机器人流程自动化）、AI（人工智能）等智能化技术相结合，为企业提供更敏捷、优质的服务。 6、开源流程引擎目前 java 主流的开源流程引擎，有 jBPM，Activiti，Camunda，Flowable 等。","link":"/2021/09/16/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/"},{"title":"微服务知识体系","text":"SpringCloud资料微服务资料目录目录…………………………………………………………………………………………………………………….. 2 1 SpringCloud简介………………………………………………………………………………………………. 1 1.1 什么是微服务…………………………………………………………………………………………………… 1 1.2 CAP定理…………………………………………………………………………………………………………… 1 1.3 微服务架构图…………………………………………………………………………………………………… 2 1.4 SpringCloud Netflix………………………………………………………………………………………………. 7 1.5 Spring Cloud Alibaba…………………………………………………………………………………………… 10 1.6 微服务之间的通讯…………………………………………………………………………………………… 10 1.7 主流微服务注册中心浅析和对比………………………………………………………………………… 10 1.8 单体优先还是微服务？…………………………………………………………………………………….. 11 2 微服务框架……………………………………………………………………………………………………. 11 2.1 参考微服务文件结构………………………………………………………………………………………… 11 2.2 服务划分……………………………………………………………………………………………………….. 16 **** 1 SpringCloud简介1.1 什么是微服务微服务架构是一个分布式系统，按照业务进行划分成为不同的服务单元，解决单体系统性能等不足。 微服务是一种架构风格，一个大型软件应用由多个服务单元组成。系统中的服务单元可以单独部署，各个服务单元之间是松耦合的。 1.2 CAP定理CAP定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。 一致性（C**）：**在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本） 可用性（A**）：**在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性） 分区容忍性（P**）：**以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。 CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。如果在某个分布式系统中数据无副本， 那么系统必然满足强一致性条件， 因为只有独一数据，不会出现数据不一致的情况，此时C和P两要素具备，但是如果系统发生了网络分区状况或者宕机，必然导致某些数据不可以访问，此时可用性条件就不能被满足，即在此情况下获得了CP系统，但是CAP不可同时满足。因此在进行分布式架构设计时，必须做出取舍。 Zookeeper**和Consul保证的是CP，而Eureka则是AP，Nacos不仅支持CP也支持AP**。 1.3 微服务架构图1.3.1 Eurake微服务架构图1 1.3.2 Eurake微服务架构图2https://www.processon.com/view/5b7d2f1fe4b075b9fe22d3d2?fromnew=1 1.3.3 Eurake微服务架构图3https://www.processon.com/view/5ed36dd5e401fd0735a531cd?fromnew=1 1.3.4 Alibaba微服务架构图4https://www.processon.com/view/5db03daee4b0e433944b5a68?fromnew=1 1.3.5 Alibaba微服务架构图5https://www.processon.com/view/60c18dcbe401fd34a14ea35a?fromnew=1 1.3.6 Alibaba微服务架构图6https://www.processon.com/view/5dc2c0ffe4b0e433945eefe9?fromnew=1 https://www.processon.com/view/60e503da0e3e745f07eb05aa?fromnew=1 https://www.processon.com/view/5fbc7ad8e401fd2d6ed50d8f?fromnew=1 1.4 SpringCloud Netflix微服务架构的逻辑结构组成，包括各种微服务、注册发现、服务网关、熔断器、统一配置、跟踪服务等。 1.4.1 FeignFeign(接口调用)：微服务之间通过Rest接口通讯，Spring Cloud提供Feign框架来支持Rest的调用，Feign使得不同进程的Rest接口调用得以用优雅的方式进行，这种优雅表现得就像同一个进程调用一样。 1.4.2 EurekaNetflix eureka(注册发现)：微服务模式下，一个大的Web应用通常都被拆分为很多比较小的web应用(服务)，这个时候就需要有一个地方保存这些服务的相关信息，才能让各个小的应用彼此知道对方，这时就需要在注册中心进行注册。 每个应用启动时向配置的注册中心注册自己的信息（ip地址，端口号, 服务名称等信息），注册中心将他们保存起来，服务间相互调用的时候，通过服务名称就可以到注册中心找到对应的服务信息，从而进行通讯。 注册与发现服务为微服务之间的调用带来了方便，解决了硬编码的问题。服务间只通过对方的服务id，而无需知道其ip和端口即可以获取对方方服务。 1.4.3 RibbonRibbon(负载均衡)：Ribbon是Netflix发布的负载均衡器，它有助于控制HTTP和TCP客户端的行为。为Ribbon配置服务提供者的地址列表后，Ribbon就可基于某种负载均衡算法，自动地帮助服务消费者去请求。 Ribbon默认为我们提供了很多的负载均衡算法，例如轮询、随机等。当然，我们也可为Ribbon实现自定义的负载均衡算法。 在SpringCloud中，当Ribbon与Eureka配合使用时，Ribbon可自动从EurekaServer获取服务提供者的地址列表，并基于负载均衡算法，请求其中一个服务提供者的实例 （为了服务的可靠性，一个微服务可能部署多个实例） 1.4.4 HystrixHystrix(**熔断器)**：当服务提供者响应非常缓慢，那么消费者对提供者的请求就会被强制等待，直到提供者响应或超时。 在高负载场景下，如果不做任何处理，此类问题可能会导致服务消费者的资源耗竭甚至整个系统的崩溃（雪崩效应），Hystrix正是为了防止此类问题发生。 Hystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止级联失败，从而提升系统的可用性与容错性。 Hystrix**主要通过以下几点实现延迟和容错：** 包裹请求：使用HystrixCommand（或HystrixObservableCommand）包裹对依赖的调用逻辑，每个命令在独立线程中执行。这使用了设计模式中的“命令模式”。 跳闸机制：当某服务的错误率超过一定阈值时，Hystrix可以自动或者手动跳闸，停止请求该服务一段时间。 资源隔离：Hystrix为每个依赖都维护了一个小型的线程池（或者信号量）。如果该线程池已满，发往该依赖的请求就被立即拒绝，而不是排队等候，从而加速失败判定。 监控：Hystrix可以近乎实时地监控运行指标和配置的变化，例如成功、失败、超时和被拒绝的请求等。 回退机制：当请求失败、超时、被拒绝，或当断路器打开时，执行回退逻辑。回退逻辑可由开发人员指定。 1.4.5 ZuulZuul(微服务网关) ：不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求。 例如一个电影购票的手机APP，可能调用多个微服务的接口才能完成一次购票的业务流程 如果让客户端直接与各个微服务通信，会有以下的问题： 1、客户端会多次请求不同的微服务，增加了客户端的复杂性。 2、存在跨域请求，在一定场景下处理相对复杂。 3、认证复杂，每个服务都需要独立认证。 4、难以重构，随着项目的迭代，可能需要重新划分微服务。 例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将很难实施。 某些微服务可能使用了对防火墙/浏览器不友好的协议，直接访问时会有一定的困难。 以上问题可借助微服务网关解决。微服务网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过微服务网关。 使用微服务网关后，微服务网关将封装应用程序的内部结构，客户端只用跟网关交互，而无须直接调用特定微服务的接口。 这样，开发就可以得到简化。不仅如此，使用微服务网关还有以下优点： 易于监控。可在微服务网关收集监控数据并将其推送到外部系统进行分析。 易于认证。可在微服务网关上进行认证，然后再将请求转发到后端的微服务，而无须在每个微服务中进行认证。 减少了客户端与各个微服务之间的交互次数。 1.4.6 ConfigSpring cloud Config（ 统一配置服务）：对于传统的单体应用，常使用配置文件管理所有配置。 例如一个SpringBoot开发的单体应用，可将配置内容放在application.yml文件中。如果需要切换环境，可设置多个Profile，并在启动应用时指定spring.profiles.active={profile}。 然而，在微服务架构中，微服务的配置管理一般有以下需求： 集中管理配置。一个使用微服务架构的应用系统可能会包含成百上千个微服务，因此集中管理配置是非常有必要的。 不同环境，不同配置。例如，数据源配置在不同的环境（开发、测试、预发布、生产等）中是不同的。 运行期间可动态调整。例如，可根据各个微服务的负载情况，动态调整数据源连接池大小或熔断阈值，并且在调整配置时不停止微服务。 配置修改后可自动更新。如配置内容发生变化，微服务能够自动更新配置。 综上所述，对于微服务架构而言，一个通用的配置管理机制是必不可少的，常见做法是使用配置服务器管理配置。 Spring cloud bus利用Git或SVN等管理配置、采用Kafka或者RabbitMQ等消息总线通知所有应用，从而实现配置的自动更新并且刷新所有微服务实例的配置。 1.4.7 ZipkinSleuth+ZipKin(跟踪服务)：Sleuth和Zipkin结合使用可以通过图形化的界面查看微服务请求的延迟情况以及各个微服务的依赖情况。 需要注意的是Spring boot2及以上不在支持Zipkin的自定义，需要到官方网站下载ZipKin相关的jar包。 1.5 Spring Cloud AlibabaNacos**：**一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。 Sentinel**：**把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。 RocketMQ**：**开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。 Dubbo**：**这个就不用多说了，在国内应用非常广泛的一款高性能 Java RPC 框架。 Seata**：**阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。 Arthas**：**开源的Java动态追踪工具，基于字节码增强技术，功能非常强大。 1.6 微服务之间的通讯1.6.1 同步REST HTTP 协议、RPC TCP 协议。 1.6.2 异步消息中间件，常见的消息中间件有 Kafka、ActiveMQ、RabbitMQ、RocketMQ ，常见的协议有 AMQP、MQTTP、STOMP、XMPP。 1.7 主流微服务注册中心浅析和对比https://developer.aliyun.com/article/698930 Nacos Eureka Consul CoreDNS Zookeeper 一致性协议 CP+AP AP CP — CP 健康检查 TCP/HTTP/MYSQL/Client Beat Client Beat TCP/HTTP/gRPC/Cmd — Keep Alive 负载均衡策略 权重/metadata/Selector Ribbon Fabio RoundRobin — 雪崩保护 有 有 无 无 无 自动注销实例 支持 支持 不支持 不支持 支持 访问协议 HTTP/DNS HTTP HTTP/DNS DNS TCP 监听支持 支持 支持 支持 不支持 支持 多数据中心 支持 支持 支持 不支持 不支持 跨注册中心同步 支持 不支持 支持 不支持 不支持 SpringCloud集成 支持 支持 支持 不支持 不支持 Dubbo集成 支持 不支持 不支持 不支持 支持 K8S集成 支持 不支持 支持 支持 不支持 1.8 单体优先还是微服务？https://zhuanlan.zhihu.com/p/52638618 1.9 监控服务 1.9.1 Nacoshttp://localhost:8001/nacos 1.9.2 SkyWalking可以从http://skywalking.apache.org/downloads下载apache-skywalking-apm-$version.tar.gz包。 skywalking提供了一个可视化的监控平台，安装好之后，在浏览器中输入(http://localhost:8080 (opens new window))就可以访问了。 配置vm参数-idea配置vm参数 -javaagent:D:\\20.Vue\\apache-skywalking-apm-bin\\agent\\skywalking-agent.jar -Dskywalking.agent.service_name=febs-gateway -Dskywalking.collector.backend_service=localhost:11800 1.9.3 Knife4jhttps://localhost:8301/doc.html 1.9.4 Spring Boot Adminhttp://localhost:8401/applications 1.9.5 TxManagerhttp://localhost:8501/admin/index.html#/ 1.10 分布式事务LCN – TM (服务端server ) + TC ( 客户端-spring-boot 使用）LCN基本实现原理 1.发起方与参与方都与我们的LCN管理器一直保持长连接； 2.发起方在调用接口之前，先向LCN管理器申请一个全局的事务分组id； 3.发起方调用接口的时候在请求头中传递事务分组id； 4.参与方获取到请求头中有事务分组的id的，则当前业务逻辑执行完实现假关闭，不会提交或者回滚当前的事务。 5.发起方调用完接口后，如果出现异常的情况下，在通知给事务协调者回滚事务，这时候事务协调则告诉给参与方回滚当前的事务。 https://blog.csdn.net/qq_41463655/article/details/104996363 https://juejin.cn/post/6844904127865208839 1.11 参考项目资料https://gitee.com/log4j/pig https://gitee.com/matevip/matecloud https://gitee.com/mrbirdd/FEBS-Cloud?_from=gitee_search 2 微服务框架2.1 参考微服务文件结构2.1.1 SpringBlade 2.1.2 Pig微服务结构 2.1.3 BIM 项目微服务文件结构├─base // 基础依赖库 │ ├─common │ ├─message-help-starter │ ├─message.help │ ├─security.client │ ├─server.core │ └─server.support ├─database // 数据库相关配置 ├─logs ├─requests │ └─config-servers └─servers // 服务包 ├─batch.model // 模型服务(BIM业务的) │ ├─res │ ├─src ├─business-server // 项目业务服务目录 │ ├─er │ ├─server-api-bpm // bpm流程api服务 │ │ └─src │ ├─server-business // 项目服务 │ │ ├─configDev │ │ ├─configPro │ │ ├─configTest │ │ ├─sql │ │ ├─src │ ├─server-doc // 档案服务 │ │ ├─configDev │ │ ├─configPro │ │ ├─configTest │ │ └─src │ ├─server-labour // 劳务管理 │ │ ├─configDev │ │ ├─configPro │ │ ├─configTest │ │ └─src │ ├─server-news // 新闻管理 │ │ ├─configDev │ │ ├─configPro │ │ ├─configTest │ │ ├─src │ ├─server-quality // 质量管理 │ │ ├─doc │ │ ├─sql │ │ └─src │ ├─server-safety // 安全管理 │ │ ├─configDev │ │ ├─configPro │ │ ├─configTest │ │ ├─src │ ├─server-schedule │ │ ├─configDev │ │ ├─configPro │ │ ├─configTest │ │ ├─src │ ├─server-site // 现场管理 │ │ ├─configDev │ │ ├─configPro │ │ ├─configTest │ │ └─src │ └─server-steel │ ├─configDev │ ├─configPro │ ├─configTest │ └─src ├─server-cost // 合同与产值 │ ├─configDev │ ├─configPro │ ├─configTest │ ├─docs │ ├─src ├─funcs // 支撑性功能，旧项目移植过来，可以归到base │ ├─fastdfs │ ├─fastdfs-client-java │ ├─tus.upload │ └─video.ffmpeg ├─starters // starter（自定义的一些starter） │ ├─fastdfs-spring-boot-starter │ └─server.file // 文件服务，可以当到 sys-manage-center └─sys-manage-center // 框架性微服务 ​ ├─api-gateway // 网关服务 ​ │ ├─configDev ​ │ ├─configPro ​ │ ├─configTest ​ │ ├─src ​ ├─auth-center // 授权服务 ​ │ ├─configDev ​ │ ├─configPro ​ │ ├─configTest ​ │ ├─docs ​ │ ├─src ​ ├─bpm-center // 流程服务 ​ │ ├─configDev ​ │ ├─configPro ​ │ ├─configTest ​ │ ├─docs ​ │ ├─sql ​ │ ├─src ​ ├─config // 配置中心 ​ │ ├─configDev ​ │ ├─configPro ​ │ ├─configTest ​ │ ├─src ​ ├─register // 注册中心 ​ │ ├─configDev ​ │ ├─configPro ​ │ ├─configTest ​ │ ├─src ​ └─user-center // 用户中心 ​ ├─configDev ​ ├─configPro ​ ├─configTest ​ ├─doc ​ ├─sql ​ ├─src 原来规划了一个api层但是common里面要统一实体，维护起来很麻烦，就没维护了 各服务数据库隔离，原则上不允许跨库跨模式查询 2.1.4 Ebid 电子招投标项目微服务文件结构 2.2 服务划分2.2.1 服务划分微服务的划分方法，常见的是两种，按业务能力和按子域。有的观点，认为两种划分可以根据不同的情况进行选择。而有的观点，认为应该这样划分而不要那样划分。 “子域”，就是DDD中的”子域”。 “业务能力”，是一个专用名词，指的是一个连续的业务过程，其中不需要中断，也不需要别的业务过程的参与。这些业务过程自然组织起来，比如首尾相连，或者，由用户参与来自然连接。 两种不同的服务划分风格，反映了对业务本身的不同的描述与划分的风格。 比较形象地讲，按子域划分，就是把业务划成一块一块的。按业务能力划分，就是把业务划成一段一段的。一块一块的，描述业务概念和它们之间的关系。一段一段的，描述业务执行的步骤和过程。 按业务能力划分的优势主要在运行时。各个服务的运行时依赖被尽量减少。在服务性能、可用性方面不会相互牵绊，可以做到最好。 而按子域划分的优势主要在设计时和演进时。有利于应对业务的规模发展、复杂性增加和分别演进。 2.2.2 共享实体\\1. 做基础包负责实体的管理，但是没有必要，一个是不同服务可能完全是两种语言，共享实体的问题不存在，2.同样语言，不同服务的编写团队不同，风格不同，规范不同，反而会引起工程管理的复杂，所以既然是微服务就遵循它的优势，足够独立； \\2. 微服务的主要优点体现在这里：你可以按照你的情况自己决定你在多大程度上共享实体。不同的语言、不同的团队、不同的业务节奏、实体上不同的关注角度，都可以导致你对实体共享的程度不同，而这些程度都可以在微服务的架构中得到支持。而且当你的共享程度在演进中发生变化的时候，微服务架构也能支持。 \\3. 请求和响应 以DTO 的形式放到一个公共的包中 gradle编译可控制哪些类不要编译 按需编译 然后DTO 和 DO 间采用 mapstruct 转换。 \\4. 解决方法有三个：1.单独将user实体类放入common包中，如果这样，user实体类的增删改查方法再auth中，但是实体类却在common中，难免有些奇怪，后期维护的时候可能会找不到这个实体类。2.将所有的entity都放入common包中。这样算然比较统一，但是对本系统进行分割，本来就是因为系统的业务比较独立，除了某些特殊情况外，实体类应该是不会有任何的共有。3.观察了一下，hr这边虽然引用了user类，但实际上只是想获取user类中的邮箱字段，既然如此，就直接写个接口返回Map即可。最后采用的是第三种解决办法，虽然说是彻底解耦了，但是只是调用一次接口就返回一个字符串，也不知道是否是最佳方案。 \\5. 独立的服务独立的数据源 entity公用就没有分库的意义了。 2.2.3 POJO DTODTO（Data Transfer Object）数据传输对象，服务间的交互使用DTO来解耦 VO（Value Object）值对象，前端展示的数据 PO（Persistant Object）持久对象 BO（Business Object）业务对象，服务内部使用的业务对象，用来存储数据库提取的数据 系统和系统的复杂度不同，协作水平不同而定，协作时保证概念一致 DTO 和 DO 间采用dozer + lombok， mapstruct 转换 2.3 微服务项目规划2.3.1 技术选型Spring Cloud Alibaba SpringCloud GateWay 网关 Nacos：服务发现、配置管理和服务管理 Feign: 服务间调用 Redis: RocketMQ： 可选： Sentinel：流量控制、熔断降级、负载保护 Ribbon:负载均衡 Spring Cloud LoadBalancer：客户端负载均衡 Seata：分布式事务 Skywalking:链路追踪 任务调度： Grafana：大屏展示-服务监控 Prometheus：监控报警-服务监控 Zipkin：调用链跟踪-服务监控 EPK：日志中心-服务监控 Security：安全审计-服务监控 2.3.2 项目文件目录规划微服务项目名称：rdp-cloud rdp-base – 公共工具类核心包 rdp-common – 公共类包 rdp-auth – 授权服务 rdp-services – 微服务 |–service-flowable – 流程微服务 |–service-user – 用户微服务 |–service-generator – 代码生成微服务 |–service-system –系统功能微服务 |–service-jog –任务服务 |…… rdp-service-api – 微服务间接口定义模块 rdp-ops – 微服务基础模块 |–gateway –Spring Cloud Gateway网关 |–register –Nacos Server |–monitor –服务监控 |–sentinel-dashboard –流量高可用 \\1. 基础类包与公共类包的处理方式？随业务变化和基本不变的类处理方式？ \\2. 微服务间 DTO 类的定义及处理方式？ \\3. rdp-services 业务服务统一归此文件下。 \\4. rdp-ops 微服务架构相关的扩展统一归此文件下。 2.4 系统介绍2.4.1 密码授权1.获取验证码 GET http://localhost:8802/auth/captcha?key=6113 \\2. 密码登录获取Token Post http://localhost:8802/auth/oauth/token 返回Response: {“access_token”:”2a60eb6a-779e-4911-9ed4-902f978d8299”,”token_type”:”bearer”,”refresh_token”:”1fde4fa4-3083-4e40-a714-fd4cf492f7a0”,”expires_in”:86399,”scope”:”all”} Authorization: Basic base64encode(username+”:”+password),username:第三方应用名称，password:密码。 使用PostMan 时，可选择Basic Auth 3.通过token获取 用户信息及权限信息 Get http://localhost:8802/auth/user Authorization: bearer 2a60eb6a-779e-4911-9ed4-902f978d8299 Authorization=bearer+token 4.检查token,检查token相应的用户及权限信息 POST http://localhost:8802/auth/oauth/check_token Authorization: Basic ZmViczoxMjM0NTY= token=b2633257-3e2d-447a-aa22-5f1fb2b4cada 5.刷新token,更新token 有效期 http://localhost:8802/auth/oauth/token 3 授权、认证服务3.1 spring-cloud-starter-securityspring-cloud-starter-security主要用来认证和授权, 怎么授权呢? spring-cloud-starter-security提供许多拦截器, 当你在登录的时候, 他就把你拦下来检查,看有没有登录信息, 如果没有就不给过, 在requestMapping上, 由于加了需要某某权限才能访问此方法, 于是又被拦下检查, 这次检查有没有需要的权限。 3.2 spring-cloud-starter-oauth2spring-cloud-starter-oauth2主要用来认证, 它只负责发放令牌, 你只要带着它要求的参数, 通过它给的路径去访问它, 他就给你一个令牌, 别的事他不管。 OAuth 2 有四种授权模式，分别是授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials）。 公司内部有很多个服务，可以专门提取出一个认证中心，这个认证中心就充当上面所说的权威认证平台的角色，所有的服务都要到这个认证中心做认证。 对于多服务的平台，可以使用 OAuth2 实现服务的单点登录，只做一次登录，就可以在多个服务中自由穿行，当然仅限于授权范围内的服务和接口。 配置最多的就是认证服务端，验证账号、密码，存储 token，检查 token ,刷新 token 等都是认证服务端的工作。 spring-cloud-starter-oauth2包含了 spring-cloud-starter-security，所以不用再单独引入了。 参考资料： code 参数换取 Token，access_token ，使用它，就可以去获取用户的资源了 https://www.cnblogs.com/xiaofengwang/p/11376881.html https://www.jianshu.com/p/a711ea5ad965 https://blog.csdn.net/j754379117/article/details/70175198 https://www.cnblogs.com/fengzheng/p/11724625.html https://www.cnblogs.com/fengzheng/p/11810340.html 流程图中，包含四个角色。 ResourceOwner为资源所有者，即为用户 User-Agent为浏览器 AuthorizationServer为认证服务器，可以理解为用户资源托管方，比如企业微信服务端 Client为第三方服务 调用流程为： A) 用户访问第三方服务，第三方服务通过构造OAuth2链接（参数包括当前第三方服务的身份ID，以及重定向URI），将用户引导到认证服务器的授权页 B) 用户选择是否同意授权 C) 若用户同意授权，则认证服务器将用户重定向到第一步指定的重定向URI，同时附上一个授权码。 D) 第三方服务收到授权码，带上授权码来源的重定向URI，向认证服务器申请凭证。 E) 认证服务器检查授权码和重定向URI的有效性，通过后颁发AccessToken（调用凭证） D)**与E)**的调用为后台调用，不通过浏览器进行 3.2.1 oauth中的角色client：调用资源服务器API的应用 Oauth 2.0 Provider：包括Authorization Server和Resource Server （1）Authorization Server：认证服务器，进行认证和授权 （2）Resource Server：资源服务器，保护受保护的资源 user：资源的拥有者 Oauth 2.0 Provider**介绍** Authorization Server: （1）AuthorizationEndpoint:进行授权的服务，Default URL: /oauth/authorize （2）TokenEndpoint：获取token的服务，Default URL: /oauth/token Resource Server: OAuth2AuthenticationProcessingFilter：给带有访问令牌的请求加载认证 3.2.2 Authorization Server1、 创建两个配置类，一个继承AuthorizationServerConfigurerAdapter，一个继承WebSecurityConfigurerAdapter。 2、 主要的两种注解： @EnableAuthorizationServer：声明一个认证服务器，当用此注解后，应用启动后将自动生成几个Endpoint： /oauth/authorize：验证 /oauth/token：获取token /oauth/confirm_access：用户授权 /oauth/error：认证失败 /oauth/check_token：资源服务器用来校验token /oauth/token_key：如果jwt模式则可以用此来从认证服务器获取公钥 以上这些endpoint都在源码里的endpoint包里面。 @Beans：需要实现AuthorizationServerConfigurer AuthorizationServerConfigurer**包含三种配置：** ClientDetailsServiceConfigurer：client客户端的信息配置 AuthorizationServerSecurityConfigurer：声明安全约束，哪些允许访问，哪些不允许访问 AuthorizationServerEndpointsConfigurer：声明授权和token的端点以及token的服务的一些配置信息，比如采用什么存储方式、token的有效期等 3.2.3 授权码授权过程 1.授权登录：用户打开第三方应用页面自动跳转到平台授权页面或者点击打开跳转到授权页面；不同平台有不同的授权页面地址。 2.授权平台：跳转页面的传参appid、redirect_uri等参数进行验证，通过则返回授权提示页面。 3.返回授权提示页面，提示用户授权的范围及应用，询问是否允许授权。 4.用户点击允许授权第三方应用，申请分配code。 5.向授权平台申请生成code，平台验证参数生成code。 6.返回code并重定向到第三方应用链接（不同平台返回链接不一样）。 7.返回第三方应用前端，第三方应用以Code向第三方服务端申请登录（带上授权平台属性）。 8.第三方服务端以code向相应授权平台申请token。 9.授权平台验证参数，返回token及时效信息。 10.第三方服务端以token到相应平台取资源信息（用户信息）。 11.返回资源信息，第三方服务端保存平台token及用户信息。 12.第三方服务端进行登录操作并返回登录信息。 注： 1、 第2**、3、4、5**步可能存在合并的情况。 2、 第11**步用户信息，需要区分租户，保存用户信息及平台ID，用户在平台上的ID。** 3、 第12**步在第三方登录授权** 与 平台授权区分，以及有效时间区分。 4、 第6**步重定向到第三方前端地址方便控制，也可重定到第三方服务端。** 4 Java基础知识4.1 EnableAutoConfiguration在一些扩展项目上，我们无法直接操作 spring 容器，可以通过 在任意src目录下添加 文件写入我们的 配置类，/META-INF/spring.factories 键值为： org.springframework.boot.autoconfigure.EnableAutoConfiguration 4.2 Filter Servlet过滤器Fileter是一个小型的web组件，它们通过拦截请求和响应，以便查看、提取或以某种方式操作客户端和服务器之间交换的数据，实现“过滤”的功能。Filter通常封装了一些功能的web组件，过滤器提供了一种面向对象的模块化机制，将任务封装到一个可插入的组件中， Filter组件通过配置文件来声明，并动态的代理。 4.3 Spring控制反转IOC、依赖注入、容器管理对象的生命周期、反射机制。 面向切面编程（AOP）框架、AspectJ、代理模式。 Spring 中使用的对象都由 IoC 容器管理，不需要我们手动使用 new 运算符创建对象。由 IoC 容器管理的对象称为 Spring Bean，Spring Bean 就是 Java 对象，和使用 new 运算符创建的对象没有区别。 Spring 通过读取 XML 或 Java 注解中的信息来获取哪些对象需要实例化。 http://c.biancheng.net/spring_boot/ 4.3.1 IOC在传统的Java编程中，当需要用到某个对象的时候，我们都是主动显式创建一个对象实例（new）。使用Spring后就不需要这样做了，因为Spring会帮我们在需要用到某些对象的地方自动注入该对象，而无须我们自己去创建。这种模式俗称控制反转，即IOC（Inversion of Control）。 @ComponentScan注解来扫描组件并注册，路径下所有被@Controller、@Service、@Repository和@Component注解标注的类都会被纳入IOC容器中。 4.3.2 注解@SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用，@SpringBootApplication是一个复合注解，包括@ComponentScan，@SpringBootConfiguration，@EnableAutoConfiguration。 @RestController的意思就是controller里面的方法都以json格式输出。 @Component将类添加进容器，@ConfigurationProperties配置文件中的数据注入到类中。 @SpringBootConfiguration继承自@Configuration，二者功能也一致，标注当前类是配置类，并会将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到srping容器中，并且实例名就是方法名。 @EnableAutoConfiguration的作用启动自动的配置。 @EnableAutoConfiguration注解的意思就是Springboot根据你添加的jar包来配置你项目的默认配置，比如根据spring-boot-starter-web，来判断你的项目是否需要添加了webmvc和tomcat，就会自动的帮你配置web项目中所需要的默认配置。 @ComponentScan，扫描当前包及其子包下被@Component，@Controller，@Service，@Repository注解标记的类并纳入到spring容器中进行管理。 @ResponseBody 表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api。在使用@RequestMapping后，返回值通常解析为跳转路径，加上@esponsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。 @Controller 用于定义控制器类，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层），一般这个注解在类中，通常方法需要配合注解@RequestMapping。 @RestController用于标注控制层组件(如struts中的action)，@ResponseBody和@Controller的合集。 @Service一般用于修饰service层的组件。 @Repository 使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。 @Bean用@Bean标注方法等价于XML中配置的bean。 @Value注入Spring boot application.properties配置的属性的值。 @PropertySource 如果将所有的配置都集中到 application.properties 或 application.yml 中，那么这个配置文件会十分的臃肿且难以维护，因此我们通常会将与 Spring Boot 无关的配置（例如自定义配置）提取出来，写在一个单独的配置文件中，并在对应的 JavaBean 上使用 @PropertySource 注解指向该配置文件。 @ImportResource Spring Boot 中是不包含任何的 Spring 配置文件的，即使我们手动添加 Spring 配置文件到项目中，也不会被识别。那么 Spring Boot 项目中真的就无法导入 Spring 配置吗？答案是否定的。 Spring Boot 为了我们提供了以下 2 种方式来导入 Spring 配置： 使用 @ImportResource 注解加载 Spring 配置文件 使用全注解方式加载 Spring 配置 https://www.cnblogs.com/aademeng/articles/11218079.html 4.3.3 配置绑定SpringBoot 提供了以下 2 种方式进行配置绑定： 使用 @ConfigurationProperties 注解 使用 @Value 注解 只有在容器中的组件，才会拥有 SpringBoot 提供的强大功能。如果我们想要使用 @ConfigurationProperties 注解进行配置绑定，那么首先就要保证该对 JavaBean 对象在 IoC 容器中，所以需要用到 @Component 注解来添加组件到容器中。 @PropertySource(value = “classpath:person.properties”)//指向对应的配置文件 @Component @ConfigurationProperties(prefix = “person”) public class Person { @Value(“${person.lastName}”) private String lastName; yml 配置 与 properties 文件类似，我们也可以添加 4 个配置文件： applcation.yml：默认配置 application-dev.yml：开发环境配置 application-test.yml：测试环境配置 application-prod.yml：生产环境配置 4.3.4 Spring Boot统一日志框架SpringBoot 底层使用 slf4j+logback 的方式记录日志，当我们引入了依赖了其他日志框架的第三方框架（例如 Hibernate）时，只需要把这个框架所依赖的日志框架排除，即可实现日志框架的统一，示例代码如下。 org.apache.activemq activemq-console ${activemq.version} ​ **** ​ commons-logging ​ commons-logging ​ **** 4.3.5 Spring Boot拦截器定义拦截器 在 Spring Boot 中定义拦截器十分的简单，只需要创建一个拦截器类，并实现 HandlerInterceptor 接口即可。 注册拦截器 创建一个实现了 WebMvcConfigurer 接口的配置类（使用了 @Configuration 注解的类），重写 addInterceptors() 方法，并在该方法中调用 registry.addInterceptor() 方法将自定义的拦截器注册到容器中。 指定拦截规则 在使用 registry.addInterceptor() 方法将拦截器注册到容器中后，我们便可以继续指定拦截器的拦截规则了。 4.3.6 数据源DruidDruid 是阿里巴巴推出的一款开源的高性能数据源产品，Druid 支持所有 JDBC 兼容的数据库，包括 Oracle、MySQL、SQL Server 和 H2 等等。Druid 不仅结合了 C3P0、DBCP 和 PROXOOL 等数据源产品的优点，同时还加入了强大的监控功能。通过 Druid 的监控功能，可以实时观察数据库连接池和 SQL 的运行情况，帮助用户及时排查出系统中存在的问题。 4.3.7 Spring AOP：基于AspectJ注解开发AOP底层为动态代理，AOP指的是：在程序运行期间动态地将某段代码切入到指定方法指定位置进行运行的编程方式，相关设计模式为代理模式。面向切面编程（AOP）框架、AspectJ、代理模式。 定义切面@Aspect @Aspect public class AspectModule { 定义切入点@Pointcut // 要求：方法必须是private，返回值类型为void，名称自定义，没有参数 @Pointcut(“execution(net.biancheng...*(..))”) private void myPointCut() { } 定义通知advice @AspectJ 支持 5 种类型的 advice，以下为使用 @Before 的示例。 @Before(“myPointCut()”) public void beforeAdvice(){ 4.3.8 事务事务具有以下 4 个特性，即原子性、一致性、隔离性和持久性，这 4 个属性称为 ACID 特性。 原子性（Atomicity）：一个事务是一个不可分割的工作单位，事务中包括的动作要么都做要么都不做。 一致性（Consistency）：事务必须保证数据库从一个一致性状态变到另一个一致性状态，一致性和原子性是密切相关的。 隔离性（Isolation）：一个事务的执行不能被其它事务干扰，即一个事务内部的操作及使用的数据对并发的其它事务是隔离的，并发执行的各个事务之间不能互相打扰。 持久性（Durability）：持久性也称为永久性，指一个事务一旦提交，它对数据库中数据的改变就是永久性的，后面的其它操作和故障都不应该对其有任何影响。 4.3.9 java的反射机制Java语言允许通过程序化的方式间接对Class的对象实例操作，Class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象，通过该元信息对象可以获知Class的结构信息：构造函数、属性和方法等。Java允许用户借由这个Class相关的元信息对象间接调用Class对象的功能.","link":"/2021/09/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"title":"正则表达式全集","text":"字符 描述 \\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\\\”匹配“\\”而“\\(”则匹配“(”。 ^ 匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\\n”或“\\r”之后的位置。 $ 匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\\n”或“\\r”之前的位置。 * 匹配前面的子表达式零次或多次。例如，zo能匹配“z”以及“zoo”。等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。 ? 匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。 {n} n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。 {n,} n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。 {n,m} m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。 ? 当该字符紧跟在任何一个其他限制符（,+,?，{*n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。 . 匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符，请使用像“`(. (pattern) 匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\\(”或“\\)”。 (?:pattern) 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`( (?=pattern) 正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95 (?!pattern) 正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95 (?&lt;=pattern) 反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95 (?&lt;!pattern) 反向否定预查，与正向否定预查类拟，只是方向相反。例如“(?”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows`”。 x|y 匹配x或y。例如，“`z [xyz] 字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。 [^xyz] 负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“p”。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。 \\b 匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。 \\B 匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。 \\cx 匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。 \\d 匹配一个数字字符。等价于[0-9]。 \\D 匹配一个非数字字符。等价于[^0-9]。 \\f 匹配一个换页符。等价于\\x0c和\\cL。 \\n 匹配一个换行符。等价于\\x0a和\\cJ。 \\r 匹配一个回车符。等价于\\x0d和\\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。 \\S 匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。 \\t 匹配一个制表符。等价于\\x09和\\cI。 \\v 匹配一个垂直制表符。等价于\\x0b和\\cK。 \\w 匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”。 \\W 匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。 \\xn 匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&amp;1”。正则表达式中可以使用ASCII编码。. *num* 匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。 *n* 标识一个八进制转义值或一个向后引用。如果*n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n*为一个八进制转义值。 *nm* 标识一个八进制转义值或一个向后引用。如果*nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm*。 *nml* 如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。 \\un 匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。 常用正则表达式 用户名 /^[a-z0-9_-]{3,16}$/ 密码 /^[a-z0-9_-]{6,18}$/ 十六进制值 /^#?([a-f0-9]{6}|[a-f0-9]{3})$/ 电子邮箱 /^([a-z0-9_.-]+)@([\\da-z.-]+).([a-z.]{2,6})$/ /^[a-z\\d]+(.[a-z\\d]+)*@(\\da-z?)+(.{1,2}[a-z]+)+$/ URL /^(https?://)?([\\da-z.-]+).([a-z.]{2,6})([/\\w .-])/?$/ IP 地址 /((2[0-4]\\d|25[0-5]|[01]?\\d\\d?).){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)/ /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ HTML 标签 /^&lt;([a-z]+)([^&lt;]+)(?:&gt;(.)&lt;/\\1&gt;|\\s+/&gt;)$/ 删除代码\\注释 (?&lt;!http:|\\S)//.*$ Unicode编码中的汉字范围 /^[\\u2E80-\\u9FFF]+$/","link":"/2020/04/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A8%E9%9B%86/"},{"title":"舒适终端","text":"iTerm2 + Oh My Zsh自定义终端（Mac） homebrew、Xcode、git、iterm2、zsh Step1 下载iTerm2下载地址：https://www.iterm2.com/ 老版本MacOS需手动切换zsh，执行以下命令 1chsh -s /bin/zsh 如果想切回bash，执行以下命令 1chsh -s /bin/bash Step2 安装Oh My Zshcurl安装 1# curl 安装方式2sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" wget安装 1# wget 安装方式2sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" 地址：https://github.com/robbyrussell/oh-my-zsh Step3 安装PowerLine首先安装pip，已经安装的跳过 1sudo easy_install pip 安装powerline 1pip install powerline-status --user Step3 选择字体和配色iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text自行选择 Step4 选择主题下载agnoster主题 1cd ~/Desktop/OpenSource2git clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git3cd oh-my-zsh-agnoster-fcamblor/4./install 打开zshrc配置文件，将ZSH_THEME后面的字段改为”agnoster” 1oepn ~/.zshrc 修改完成后，执行配置 1source ~/.zshrc Step5 安装高亮插件1cd ~/.oh-my-zsh/custom/plugins/2git clone https://github.com/zsh-users/zsh-syntax-highlighting.git3open ~/.zshrc 这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上： 请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。 然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 执行命令使刚才的修改生效： 1source ~/.zshrc 最后愉快的去使用吧！","link":"/2019/12/24/%E8%88%92%E9%80%82%E7%BB%88%E7%AB%AF/"},{"title":"软件组织结构及权限管理设计草案","text":"软件系统组织结构及权限管理设计方案整理一、集团企业的组织结构（事业部制） ​ 顶层：集团总部-职能部门、事业部、直属单位 ​ 第二层：一级子公司-部门、分公司、办事处 ​ 第三层：二级子公司-部门、分公司、办事处 ​ 第四层：三级子公司-部门、分公司、办事处 ​ 理论上支持无线自顶向下无限延伸，但一般到二级子公司，管理层级控制在三级以内。 ​ 支持上下级维护，树形结构 二、岗位、职位、职级、职称 ​ 1、岗位与职位的区别 ​ 职位就是工作性质相同、工作内容相似的一系列岗位的归类。它是由实现企业职能的一个个具体活动所构成的相对独立体。 ​ 岗位是组织要求个体完成的一项或多项责任以及为此赋予个体的权力的总和。它是在一个特定的企业组织中、在一个特定的时间内、由一个特定的人所担负的一个或数个任务所组成。 ​ 简单来说，岗位=组织+职位；职位&gt;岗位；职位对事、岗位对人 ​ 例如：部门经理—-职位；设计一部部门经理、设计二部部门经理—-岗位 ​ 2、岗位序列和岗位职级 ​ 不同的岗位有不痛的序列 ​ 例如：管理序列—-职能管理、生产管理 ​ 技术序列—-技术管理、专业技术 ​ 研发序列、市场序列、辅助序列等。 ​ ​ 图：某院岗位职级体系表 ​ 3、职级：与岗位挂钩，同时企业定义等级，如阿里P7、P8 ​ 4、职称：理论上职称是指专业技术人员的专业技术水平、能力，以及成就的等级称号。 ​ 高级—-正高级、副高级；中级；初级—-助理级、员级 ​ 不同的系列或组织，名称不一样。 三、常用的权限系统设计模型 1、RBAC：Role Based Access Control（基于角色的访问控制） ​ RBAC是我们当前使用范围最广的一种权限设计模型，模型基础就是用户和角色，角色和权限做多对多的对应。标准的RBAC模型包括四个部件模型，分别为基本模型RABC0、角色分级模型RABC1、角色限制模型RABC2、统一模型RABC3。 RBAC0（基本模型）定义了完全支持RBAC概念的任何系统的最低需求。RBAC0的模型中包括用户（U）、角色（R）和许可权（P）等3类实体集合，RABC0是权限管理的核心部分，其他的版本都是建立在0的基础上。 RBAC1（角色分级模型）基于RBAC0模型，引入角色间的继承关系，即角色上有了上下级的区别，角色间的继承关系可分为一般继承关系和受限继承关系。一般继承关系仅要求角色继承关系是一个绝对偏序关系，允许角色间的多继承。而受限继承关系则进一步要求角色继承关系是一个树结构，实现角色间的单继承。这种模型合适于角色之间的层次明确，包含明确。 RBAC2（角色限制模型）引入了角色间的约束关系，主要约束规则包括：角色间的互斥关系，在处理用户和这些角色之间的关系时，包括静态分离和动态分离，静态分离指互斥的角色不能同时赋予同一个用户；动态分离指用户不能同时操作两个互斥的角色进行登录。 RBAC3（统一模型）同时包含了1和2的特性。 2、DAC：Discretionary Access Control（自主访问控制） ​ 系统会识别用户，然后根据被操作对象（object）的权限控制列表（ACL：Access Control List）或者权限控制矩阵（ACL：Access Control Matrix）的信息来决定用户的是否能对其进行哪些操作，例如读取或修改。而拥有对象权限的用户，又可以将该对象的权限分配给其他用户，所以称之为“自主（Discretionary）”控制。 ​ DAC最大缺陷就是所有用户的权限不能统一管理，用户和用户的权限比较分散，后期调整只能单个进行调整，不易维护。 3、MAC：Mandatory Access Control（强制访问权限） ​ 在MAC的设计中，每一个对象都都有一些权限标识，每个用户同样也会有一些权限标识，而用户能否对该对象进行操作取决于双方的权限标识的关系，这个限制判断通常是由系统硬性限制且无法回避的。强制访问控制多应用于对安全性要求比较高的系统，如多级安全军事系统； 4、ABAC：Attribute Based Access Control（基于属性的权限验证） ​ ABAC则是通过动态计算一个或一组属性，来是否满足某种条件来进行授权判断（可以编写简单的逻辑）。属性通常来说分为四类：用户属性（如用户年龄），环境属性（如当前时间），操作属性（如读取）和对象属性（如一篇文章，又称资源属性），所以理论上能够实现非常灵活的权限控制，几乎能满足所有类型的需求。 四、快速开发平台权限控制方案 ​ 对于saas平台这样体系较大功能复杂的平台，权限设计在初始设计阶段，考虑的越全面、精细，后期的维护及扩展就越简单。RBAC是现有很成熟的权限设计模型，同时也是经受过市场的验证，可以很好的适用我们的快速开发平台。因此建议采用RBAC的权限设计模型。 1、权限类型 菜单权限：控制菜单的显示，一般控制到叶子节点菜单 操作权限：按钮显示、接口（增删改查）的控制 数据权限：不同岗位人员所看到的的数据是不一样的（只对数据列表做控制，不对具体数据表单控制） 2、基础权限设置 用户–角色–权限 一个用户对应对个角色，一个角色对应多个权限 3、组织 ​ 可以把组织与角色进行关联,用户加入组织后,就会自动获得该组织的全部角色,无须管理员手动授予,大大减少工作量,同时用户在调岗时,只需调整组织,角色即可批量调整。组织的另外一个作用是控制数据权限,把角色关联到组织,那么该角色只能看到该组织下的数据权限。 ​ 其实这里的组织和用户组作用差不多，通过组织关联角色，就不用每个用户去关联角色。 4、职位 ​ 一个企业在发展过程中，人员的变动是很频繁的，但职位定下来后基本是不会变的，如果用户和角色中间加入职位定义的话，那么会减少系统管理人员的工作量。 ​ 同一组织内会有不同的职位，但每个职位的权限是不一样的，职位高的拥有更多的权限。特殊情况下一个人可能身兼多职。 ​ 因此用户、职位、角色之间得有关联关系，用户关联职位，职位关联角色。 5、岗位 ​ 同一职位会有不同岗位，虽然大部分情况权限定义到组织-职位就满足需求了，但是也有特殊情况。例如公司领导部门有五个分管领导（职位），但五个分管领导负责的工作内容是不同的，也就是岗位不同，他们之间的权限有比较明晰的划分。这时候就还需要用户关联岗位、岗位关联角色。 6、权限控制模型 经过以上分析，大致得出以下模型 7、权限控制 ​ 建议取权限并集，不需要切换组织部门、岗位来切换权限。 8、可行性验证 ​ 根据企业综合管理系统中的业务进行验证，但具体业务可能不一致，只作为案例回溯验证。 ​ 描述： ​ 功能模块：项目综合信息 ​ 菜单权限：分管招标领导、总经理、部门经理、财务人员、项目部、运营管理部等可以查看 ​ 操作权限：有菜单权限的均可查看，运营管理部人员可修改，运营管理部负责项目信息人员可以新增、删除 ​ 数据权限：分管领导、总经理、财务、运营管理部可以看全部，部门经理能看部门的数据，其它人员只能看自己的 ​ 权限： ​ （1）菜单权限：显示、关闭 ​ （2）操作权限：新增、删除、修改、查看 ​ （3）数据权限：全部数据、部门数据 ​ 角色： ​ （1）运营管理部人员、财务核算人员：项目综合信息菜单显示、查看全部数据权限、修改权限 ​ （2）总经理、财务人员：项目综合信息菜单显示、查看全部数据权限 ​ （3）项目经理、分管项目领导：项目综合信息菜单显示、查看部门数据权限 ​ （4）项目部门人员：项目综合信息菜单显示、查看个人数据权限 ​ （5）项目信息管理员：项目综合信息菜单显示、查看全部数据权限、修改权限、新增权限、删除权限 ​ 组织： ​ 财务部：关联财务人员角色，则财务部所有人员有该角色 ​ 运营管理部：关联运营管理部人员角色，则运营管理部所有人员有该角色 ​ 项目部：关联项目部门人员角色，则项目部所有人员有该角色 ​ 职位： ​ 财务核算人员：关联财务核算人员角色 ​ 岗位： ​ 分管项目部领导：关联分管项目领导角色 ​ 总经理：关联总经理角色 ​ 运营管理部A主管：关联项目信息管理员角色 ​ 用户： ​ 组织、职位、岗位均无法满足时，用户关联对应角色 ​ ​ ​ ​ ​ ​ ​","link":"/2021/10/25/%E8%BD%AF%E4%BB%B6%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E8%AE%BE%E8%AE%A1%E8%8D%89%E6%A1%88/"},{"title":"面向对象的一些事","text":"由来 很久以前，软件开发的世界还是一片浑浑噩噩，不管开发什么软件都面临着复杂性这个问题，代码里面到处是goto语句，程序的流程随意跳转。众生写代码时，越写到后面越不知道自己写的是什么。这时候出现一位巨人，他就是结构化编程。 结构化编程的基本思想是：有序地控制流程，即把程序的执行顺序限制为顺序、分支和循环这三种；把共通的处理归结为例程（函数）。 虽然结构化解决了程序控制流的复杂问题，但程序里面不仅包括控制结构，还包括要处理的数据。随着处理数据的增加，程序的复杂性也会上升。这时候，面向对象编程来了！ Simula 面向对象技术最早是在编程语言Simula中提出的。1967年5月20日，在挪威奥斯陆郊外的小镇莉沙布举行的IFIP TC-2 工作会议上，挪威科学家Ole-Johan Dahl和Kristen Nygaard正式发布了Simula 67语言。Simula 67被认为是最早的面向对象程序设计语言，是面向对象的开山祖师，它引入了所有后来面向对象程序设计语言所遵循的基础概念：对象、类、继承，但它的实现并不是很完整。 Simula虽然最早提出面向对象的概念，但因为其本身复杂，比较难学，而并没有大规模流行。但Simula提出的面向对象的概念对程序语言后继的发展产生了巨大和深远的影响。 Smalltalk Smalltalk是公认为历史上第二个面向对象的程序语言，而且是第一个完整实现了面向对象技术的语言。 最早的Smalltalk原型由艾伦·凯于70年代初提出。类（来自Simula-67）、海龟绘图（来自MIT的LOGO）以及图形界面等概念的有机组合，构成了Smalltalk的最初的蓝图。在1971年到1975年之间，艾伦·凯在Xerox PARC的小组设计并实现了第一个真正的Smalltalk语言系统。 Smalltalk引领了面向对象的设计思想的思潮，对其它众多的程序设计语言的产生起到了极大的推动作用。C++，C#，Objective-C，Actor，Java和Ruby等，无一不受到Smalltalk的影响，这些程序语言中也随处可见Smalltalk的影子。 除了编程语言受到Smalltalk的影响外，90年代的许多软件开发思想得利于Smalltalk，例如设计模式、敏捷编程和代码重构等。 面向对象与基于对象的区别 “面向对象”和“基于对象”两个不同的概念。面向对象的三大特点（封装，继承，多态）缺一不可，通常“基于对象”使用对象，但是无法利用现有的对象模板产生新的对象类型，继而产生新的对象，也就是说“基于对象”没有继承的特点，而“多态”是表示为父类类型的子类对象实例，没有了继承的概念也就无从谈论“多态”。现在的很多流行技术都是基于对象的，它们使用一些封装好的对象，调用对象的方法，设置对象的属性。但是它们无法让程序员派生新对象类型。他们只能使用现有对象的方法和属性。所以当你判断一个新的技术是否是面向对象的时候，通常可以使用后两个特性来加以判断。 面向对象的三个基本特征继承 继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。 实现继承是指直接使用基类的属性和方法而无需额外编码的能力； 接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力。 多态 多态即一个名字有多种语义，一个词法元素可以作多种解释。面向对象系统，对象封装了操作，利用重名的操作，让各对象自己去释意执行，这种多义性不会带来混淆，方便与高层设计。虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。最常见的多态就是将子类传入父类参数中，运行时调用父类方法时通过传入的子类决定具体的内部结构或行为。 封装 面向对象的诸多优点是靠封装手段得到“对象”而获得的。封装的目的在于将对象用户和对象的实现者分开，用户不必知道对象行为实现的细节，只要以实现者提供的消息来访问该对象。封装是面向对象的特征之一，是对象和类概念的主要特性。简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。 最后1、抽象会使复杂的问题更加简单化。2、从以前面向过程的执行者，变成了张张嘴的指挥者。3、面向对象更符合人类的思维，面向过程则是机器的思想","link":"/2020/04/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/"},{"title":"行业观察：中国ERP市场的过去、现在和未来--转载","text":"行业观察：中国ERP市场的过去、现在和未来摘要过去近十年里，不管是全球ERP市场还是中国ERP市场，增速都在逐渐下滑，这意味着ERP的渗透率正在逼近天花板，尤其是对于工业化进程领先的海外市场。根据前瞻产业研究院整理的数据，中国ERP市场规模增速从2012年的29%下滑到2018年的11%。全球ERP市场的增速从2010年的4.4%下滑到2017年的2.3%。根据我们的研究，渗透率超过50%以后，行业增速会迅速下滑到10%以内，中国的ERP市场经过约30年的发展后，渗透率也基本上接近天花板。 在一个增速放缓的行业里，集中度提升是必然。我们认为，ERP行业未来十年市场集中度还会进一步提升，同时海外公司SAP和Oracle将让出部分市场。因此，对于龙头公司用友、金蝶等的市占率提升，我们可以更加乐观一点，这个行业的增速虽然放缓，但龙头公司的收入和利润增长依然有空间。 我们对所有厂商的云ERP产品进行了对比，大的趋势是向云原生和公有化部署演进。尽管当前还有很多云ERP产品是单体架构，或者以私有化部署为主，但是各家厂商都在开发云原生ERP，并积极推进公有云部署。我们认为，尽管在相当长的时间内，云ERP的私有化部署仍将占据很大的份额，但云ERP的终极形态可能是公有云，这也是工业互联网数据大融合的基础，因为ERP中沉淀了企业最核心的业务数据。 投资建议：中国ERP市场集中度将不断提升，看好提前布局云ERP的本土厂商。推荐标的：用友网络（600588），金蝶国际（0268.HK），受益标的：鼎捷软件(300378)，汉得信息(300170)，远光软件(002063)。 风险提示：云业务发展不及预期，企业管理软件市场竞争加剧 目录 1. 过去：海外启蒙与本土巨头崛起1.1.ERP的历史从SAP开始 从大历史的角度看ERP发展。1965年，针对当时企业出现的供应滞后、交货不及时等问题，美国生产与库存管理协会（APICS）提出了MRP（物料需求计划）的概念，使得企业在库存管理上进行有效的计划和控制，但当时的企业依然围绕生产而运作。到了20世纪80年代，企业开始采用MRPII，实现了业务数据和财务数据的集成，从MRP的计划模式变为即时模式。1990年，ERP（企业资源计划，Enterprise Resource Planning）被提出，核心思想是供应链管理，跳出了传统企业边界，从供应链范围去优化企业的资源。根据美国生产与库存管理学会的统计，使用ERP可以让企业库存下降30%-50%，延期交货减少80%，采购提前期缩短50%，停工待料减少60%，制造成本降低12%，管理人员减少10%，生产能力提高10%-15%。 从功能模块角度看，一个ERP的核心模块应该包括财务、供应链和生产三部分。对生产型企业来说，所需的核心模块包括财务、供应链和生产三部分。从财务软件发展到企业管理软件，财务管理始终是核心模块，财务管理的对象是企业资金流，是企业运营效果和效率的衡量和表现；供应链包括物料的采购、库存和销售管理，要达到企业总体目标最优，就必须将这几个部分有机集成在一个模块中；而生产控制管理将企业整个生产过程有机结合在一起，使得企业能够有效降低库存，提高效率。除了核心的三大模块，ERP中可能还包含了人力资源等附加模块。 从商用产品角度来看，1981年，SAP第二代产品R/2成功上线，可以视为ERP的雏形。在R/1（RF）系统的基础上，1979年SAP在新总部德国沃尔多夫(Walldorf)开始着手开发第二代软件SAP R/2系统。从模块组成上看，SAP R/2可以称为ERP软件的雏形，因为除了财务以外，还具备生产和进销存系统，以及人力资源管理系统。1981年SAP R/2套装软件顺利上线，并且在德国慕尼黑IT展览会上首次亮相。凭借优异的性能和稳定性，这套系统很快受到了众多大型企业的欢迎。1988年10月，伴随R/2系统的成功，SAP公司的股票在德国上市交易。经过数十年发展，时至今日，SAP的S/4 HANA已经成为成熟ERP产品的典范。 1.2.西风东渐，中国产生第一批ERP厂商 ERP伴随着市场经济转型而走入中国。1978年，党的十一届三中全会后，中国开始改革开放。机械工业部旗下的企业开始通过MRPII软件改善管理。1981年沈阳第一机床厂从德国工程师协会引入第一套MRPII，接着北京第一机床厂、第一汽车制造厂、广州标致汽车厂也购买了MRPII。1989年前后，SAP、Oracle、四班等海外ERP公司走入中国。1994年，SAP设立中国代表处，1995年成立中国分公司。1998年11月9日，联想集团启动ERP项目，选择了SAP的产品，2000年8月15日联想正式对外宣布ERP项目实施成功。 台湾鼎新电脑成为中国第一家MRPII厂商。1982年3月，台湾鼎新电脑成立，专注于ERP软件开发和销售。1989年，鼎新电脑推出基于DOS平台的MRPII软件，1992年推出中国第一款基于B/S架构的高端ERP软件TIPTOP。2002年神州数码和鼎新电脑合资在大陆成立了鼎捷软件，专注于制造业ERP软件的开发，目前位居大陆ERP厂商收入体量第四名。根据我们产业调研的数据，2002年鼎捷软件成立之时，鼎新电脑已经占据了台湾ERP市场70%的份额，可谓一统天下，这也是它向大陆扩张的原因。 本土ERP厂商匆匆兴起又衰落，为用友和金蝶在ERP行业崛起奠定了人才基础。1987年，国家863计划CIMS（计算机集成制造系统）中心成立。1991年开思公司成立，开发基于AS/400平台的MRPII系统。1994年，陈佳正式将MRPⅡ升级为ERP，宣布开始要专做ERP。不久，即推出基于IBM小型机AS/400上开发的“开思ERP”和“开思OA”，1996年，开思成为本土ERP市占率第一。1994年，北京机械工业自动化研究所与美国CDC公司合资成立利玛，开发MRPII软件，由于机械工业部的背景，加上国内第一批有经验的实施人员，利玛很快获得市场成功。与此同时，上海的启明也获得了一些客户，跟利玛并称“北利玛、南启明”。但后来开思、利玛、启明因为各种各样的原因先后衰落，他们是中国ERP产业的奠基人，并成就了用友和金蝶，为今日的产业巨头提供了第一批ERP人才。 1.3.用友金蝶，继往开来 1.3.1.用友、金蝶从财务管理软件起家 跟SAP一样，用友、金蝶也是从财务管理软件起家。1988年，王文京与苏启强在北京市海淀区中关村成立了用友财务软件服务社，早期公司产品为DOS系统中运行的财务管理软件，1995年，伴随着Windows系统的普及，用友推出了基于Windows的财务软件。1996年，用友推出管理型财务软件（V6.0 For DOS），将财务软件的功能延伸到了管理会计、成本会计、财务分析、财务预算等更深的层次中。反观金蝶，1991年，徐少春创立深圳爱普电脑技术有限公司，并推出爱普电脑会计系统V1.0。1995年，金蝶推出金蝶财务软件For Windows1.0版。两家公司借助财务管理软件迅速发展壮大，并于2001年分别于A股和港股上市。值得一提的是，两家公司发展过程中，有一个重要政策的助力，1989年财政部出台《会计核算软件管理的几项规定》，限制了市场无序竞争，加速了市场集中度提升的过程。 1.3.2.98年前后，用友金蝶切入ERP领域 1997年，这一年中，用友正式开始了向管理软件战略转型，并着手研发公司的第一款ERP软件，即用友U8。2001年12月18日用友收购了华表软件等国内软件公司。2002年用友出资2000万向台湾软件商汉康购买了相关软件技术；金蝶1998年引入IDG 2000万元人民币风险投资，并正式宣布全面进军企业管理软件市场，1999年发布了金蝶K/3 ERP。2001年，金蝶从TCL手中收购了前文提到的中国ERP鼻祖开思，加强了自己的实力。 2. 现在：传统ERP渗透率已到高点2.1.传统ERP项目的商业模式 传统ERP项目的收费包括四部分：软件+实施+运维+咨询。根据我们的产业调研，国内软件和实施费用基本是1:1，运维费用有一部分客户并不交，咨询费用一般另外单独收费。时至今日，客户单独上全套ERP的情况已经比较少，更多的是单个模块的购买（一般在二三十万人民币量级），此外，ERP一般三到五年需要大版本更新（费用在百万量级）。但是维护费和大版本更新都不是强制的，根据我们对用友网络某券商客户的调研，用友一年维护费收10%，该客户一年给用友交二三十万维护费，每隔几年一个大版本升级，最近一次是从NC57到NC65，花了二百多万。维护费不是强制收入，但是如果出了问题就没有人来维护。还有另外一种解决方案是找能够解决问题的公司来，不一定要是用友或者其实施伙伴。大版本更新也不是强制的，该客户升级到NC65是因为只有NC65中才有分析模块，他们想改进业务。 ERP销售流程——IT实力越强的客户在采购自由度上越大，因为能够hold住异构系统。如果要采购ERP系统，IT部门年初要做预算，内部立项（在公司内部说清楚为什么要买，采购模式是招标还是谈判），然后内部走流程，领导同意以后就可以进展到谈判过程。一般是系统重新采购才需要招标，如果要加模块的话，就单一来源采购就行。当然也可以选别家的，但是就要做接口，而且如果选购其他家的模块，出了问题不知道是谁家的，所以IT实力越差的单位越不敢异构，对厂商依赖越大。 ERP的实施已经成为了一个单独的行业。对于用友、金蝶而言，高端客户的实施一般自己做，中低端客户会让合作伙伴负责实施。对于SAP、Oracle这样的海外ERP厂商而言，打单有两种模式，第一种是ERP厂商和实施商共同打单，第二种是软件和实施分开招标，这种情况下可以由客户自由选择实施商（原厂和四大的实施顾问人天费用比较贵，原厂大概8000元/人天，四大4000元/人天），所以我们看到SAP和汉得信息分道扬镳后，客户依然可以选择汉得作为ERP产品的实施商（2500元/人天左右）。 2.2.过去十年，ERP增速逐渐放缓 过去近十年里，不管是全球ERP市场还是中国ERP市场，增速都在逐渐下滑，这意味着ERP的渗透率正在逼近天花板，尤其是对于工业化进程领先的海外市场。根据前瞻产业研究院整理的数据，中国ERP市场规模增速从2012年的29%下滑到2018年的11%。全球ERP市场的增速从2010年的4.4%下滑到2017年的2.3%。根据我们的研究，渗透率超过50%以后，行业增速会迅速下滑到10%以内，中国的ERP市场经过约30年的发展后，也基本上接近了这个水平。 2.3.市场集中度提升是必然趋势 众所周知，在一个增速放缓的行业里，集中度提升是必然。家电行业和水泥行业就是典型，家电行业二十多年来，行业总产出增速不快，但是龙头公司利润增速比收入增速还要快，因为价格战减少以后，利润就凸显出来，格力和美的已经成为当之无愧的龙头。水泥行业就更加明显，海螺水泥占了中国水泥行业收入的53%，利润的67%。我认为，ERP行业未来十年市场集中度还会进一步提升，同时海外公司SAP和Oracle还将让出部分市场。因此，对于龙头公司用友、金蝶等的市占率提升，我们可以更加乐观一点，这个行业的增速虽然放缓，但龙头公司的收入和利润增长依然有空间。 、 ERP国产化将带来本土ERP厂商市占率进一步提升，高端ERP市场的海外垄断即将被打破。对比2008年和2018年中国ERP市场占有率排名，可以看到用友、金蝶等本土ERP厂商实现了反超。随着中美贸易摩擦的持续，我们认为，ERP国产化的趋势还将进一步演化。根据我们的产业调研，用友网络今年开始大单明显增加，用友过去的客户群体主要不是央企，而是财富200强-1000强之间的企业，现在用友的目标客户在往100强走，这些企业基本都是央企。用友网络往年5000万的订单一年一两个，今年7000万级别的至少有两个。各种迹象表明，原来由海外巨头把持的高端ERP市场，即将被本土ERP厂商渗透，但全面替代是一个漫长的过程，B端的生意总是那么慢。 2.4.国内外ERP产品的差距主要在管理思想和行业know-how 我们对海外大厂的客户进行了调研，从产品和价格两个层面对比了海外和国内ERP的情况。作为大型国有企业，客户选择SAP的产品主要是基于以下几点考虑： ——SAP是德国人的产品，积累的行业Know-How比较多。SAP发展了四十七年，在各行各业，尤其是钢铁，石油，化工，冶金等重工业领域积累了各个行业的最佳业务实践。ERP其实可以分为两个层面，一个是生产制造层面，一个是财务层面，国内的用友、金蝶从财务起家，但是生产制造层面还有一定差距。 ——身份的匹配。当时该企业跟踪了中石油，中石化，中国通号，他们基本也是用的SAP产品，作为世界五百强之一，该企业也要考虑跟身份匹配，所以选了SAP。我们认为，其实企业管理软件里面也可以打造奢侈品概念。SAP一直强调世界2000强里面90%是他们的客户，目前来看策略很成功。 ——SAP能够带来先进的管理思想，买SAP其实买的是它的业务管理经验。SAP，Oracle的产品不会为了客户改流程，国内的用友、金蝶可以大量定制化。但在客户眼里，不定制化是一种优点。他们觉得，ERP建设不单是信息化系统建设，也承载了一个单位的管理思想。国内ERP产品是按照客户现有的业务流程去改，管理思想上没有提升。SAP ERP产品本身就包含了一些管理思想，核心流程不会因为客户而改变，大部分业务可以通过流程和参数配置出来。SAP销售会跟客户说，用SAP的产品，你不用改，按照我们的流程去做就行了。 价格差距有多少？除了以上几点以外，我们还对SAP产品价格进行了详细的调研，最终的结论是，相比海外ERP厂商，用友、金蝶的价格优势大概在25%-30%之间，其实不明显。 ——产品价格，用友报价跟SAP，Oracle差不多，金蝶和浪潮稍微低一点。具体而言，License的授权，SAP是按照用户数授权（功能全部开放，即使只买一个用户，所有功能也是开放的，如果客户偷偷加了账户，SAP会找客户交涉），用友有的时候可以买断，Oracle按照功能模块授权。 ——实施价格，其实差不多。SAP实施价格3000+人/天（本土实施商，如汉得），用友3000人/天（可以打折），金蝶也会便宜一些，大概2000人/天。 ——运维价格，大部分企业不怎么交运维费用。SAP每年的运维费用高达17%的合同金额，但提供的原厂服务是给一个账号，可以在线提交问题，因此大部分客户会请本地实施商解决问题。更有甚者，会自己培养运维人才，把这部分钱也给省掉。对于用友、金蝶，也是一样的情况，运维费用有一个收取率，不是百分百（根据我们的调研，越复杂的ERP产品运维费用收取率越高）。 3.**未来：云ERP逐渐成为主流**3.1.云ERP的商业本质不仅仅是分期付款 云ERP的商业模式类似分期付款，但不同之处在于有续费率的问题存在。传统ERP的销售是一次性的，而云ERP的成功与否与续费率息息相关（此处仅仅指公有云ERP）。为了更好的研究云ERP的商业模式，我们此处选用“分组分析”这一工具，按照不同时期进入的云ERP用户，考察其后续行为情况（比如续费率等）。 假设一个云ERP公司2019年成立，当年完成新单收入100万元，假设此后每年新单收入以20%的速度增长，公司的续费率为90%，则公司的收入情况变化如下图，可以看到，续费带来的收入占比快速提升，续费率高的公司将摆脱对获客的依赖，也就是说，渗透率将不再对公司的收入体量造成致命影响。 3.2.云ERP的公有化和私有化部署 云ERP的公有云部署和私有化部署一直是市场讨论的热点，核心在于私有云ERP并未发生商业模式的变化。所谓公有化部署，就是将ERP软件部署在类似阿里云、华为云这样的公有云厂商服务器上，按年交年费给ERP厂商；私有化部署是将ERP软件部署在客户自己的服务器上，依然是一次性交费，并未体现出SaaS的优点。从用友和金蝶最新披露的三季报数据来看，用友大型云ERP NC Cloud私有化部署比例超过95%，金蝶云苍穹私有化部署比例约为47%。 我们认为，在中国，私有化和定制化仍将长期存在，尤其是对于大企业客户。每个公司的管理思想是不一样的，而ERP与业务流程高度相关，所以反映到结果上就是私有化和定制化是必然。简单的思考一下，定制化的反面是什么，就是标准化和产品化。从定制化程度来说，高端客户定制化程度高，低端客户定制化程度低，因为高端客户自己的IT能力很强，能够hold住非标系统。举个最简单的例子，华为这种公司，自己的ERP开发人员能力很强，系统大部分自己开发，可能就用厂商的一个平台，产品化程度连10%都不到，其余全部定制开发。 3.3.云ERP产品大阅兵 3.3.1.SAP云产品多数来自外延并购 对SAP而言，大量并购组成了云产品的基础。SAP自2010正式布局云计算开始，云业务已经成为公司的发展引擎。云业务收入由2012财年的2.7亿欧元增长到2018年的49.93亿欧元，增长了18.5倍。云业务收入占比也由2012财年的不到2%增长到2019 财年Q1的39.80%。但里面大量云收入来自外延并购——2013年并购Hybris，2014年并购Concur，2018年并购Callidus，2019年并购Successfactor。但值得注意的是，SAP的核心云ERP均为自研，比如S/4 HANA Cloud、Business ByDesign（中小型企业云ERP）、Business One Cloud（小型企业云ERP）。 3.3.2.NetSuite是Oracle云ERP产品的代表 在Oracle的云战略中，并购NeiSuite是一次巨大的成功。NetSuite 1998成立，2000年推出第一款云ERP套件，2013年成为全球部署最广泛的云ERP，2016年被Oracle收购（93亿美金），然后进入中国，截止目前在中国共卖了700套公有云ERP。现在全球有6个数据中心，用户的数据都存储在上面。 产品特点： ——纯云化，升级方便，只有公有云版本。根据我们的产业调研，在NetSuite顾问的眼里，他们是真正纯云架构的ERP，企业从小长到大，只需要在同一个平台上升级容量就好了，无需更换产品。而用友、金蝶，都是针对不同体量的客户有不同的产品线，比如T系列、U8、NC，如果企业长大以后，ERP产品功能无法满足需求，就要进行替换，比如从U8到NC，需要推倒重来，对企业而言是比较比较复杂的过程。NetSuite的产品理念是像人的皮肤，随着业务发展和复杂性变化，直接陪伴客户成长。 ——Oneworld功能非常适合跨国企业使用。NetSuite 云ERP有一个叫oneworld的功能，叫多账簿，多币种，多语言，能够根据不同国家的法律法规进行调整，相比之下，金蝶、用友只限制在中国，很多客户因为这样的需求转过来，尤其是有海外子公司的。用友、金蝶如果要针对海外特殊情况开发会收很贵的费用。有个典型的例子就是华为的海外门店用的是NetSuite，因为华为不知道自己要扩张多快，也不知道自己扩张的地方法律法规怎么样，所以中国系统不适用它海外业务的发展。一家企业在海外用了NetSuite以后，海外开了别的分公司，可以买oneworld功能，30天就能够导入。 ——设定了沙盒，实施周期短，成功率高。NetSuite分为三个版本——小企业版（用户5-10人，不是企业总人数，可能只有一些核心领导会用）+中型企业版（用户30人）+大云ERP。实施周期分别为30天、60天和6个月左右（大企业的实施周期要根据自身体量定）。快速上线的原因是NetSuite基于基本的财务和进销存功能做了沙盒，沙盒把里面的流程已经预设置了，做过测算，百分百成功上线。而一般的ERP一般测试一边上线，为了保证数据流是通的，中间会有反复，所以效率会低一些。 3.3.3.用友VS金蝶——NCC与苍穹的对决 2019年用友网络停售NC，主推NC Cloud，加快上云步伐。用友网络推出U8 Cloud是在2017年，而金蝶国际在2014年推出K/3 Cloud，具备领先优势，对此也比较好理解，金蝶下游客户中小企业居多，这类客户天生对于云服务有需求，而用友客户大中型企业居多，这类客户对于数据安全性非常敏感，对于成本反而不敏感，因此公司较为谨慎。2019年用友网络宣布停售NC，主推NC Cloud，属于公司云转型战略的一次加速。从本质上说，NC Cloud与NC差别并没有那么大，属于渐进式转云。与之对应的，YonSuite采用云原生架构，纯公有化部署，但主要针对中小企业。根据用友三季报电话会议披露的数据，NCC前三季度签约超过150家，确认收入大约7个项目，收入1.09亿，其中公有云收入100万。直销合同均价150万，如果考虑公有云和私有云，扣除实施费用，私有云的均价是62万左右，公有云是20万左右。NCC客户里面，来源于NC的客户占比33%，从未使用用友ERP客户占比42%。 金蝶云苍穹本质上是PaaS平台。苍穹本质上是一个PaaS平台，在此之上有一些标准云服务，比如财务云，人力云，采购云等等，就是把传统ERP软件的财务、进销存功能变成了云服务，收费模式后面写。此外还可以在此平台自己去开发应用。PaaS平台如何去理解，就是一个软件开发平台，满足了企业快速迭代业务的需求，金蝶的云服务开发平台有几个特点：1、基于浏览器，完全再现。2、零安装、零编译、零部署。3、模型化、组件化、服务化。4、多租户个性化扩展。5、OpenAPI开放服务。根据金蝶国际半年报电话会议的披露，截至2019年上半年，云苍穹确认收入1500万，签约客户28家，公有云部署占比57%，私有云占比43%。62%的客户来自EAS，12%是从K/3，还有26%是新客户。 对比用友NCC和金蝶云苍穹公有云版本的价格，我们发现用友NCC价格高于云苍穹。根据我们产业调研的数据，用财务会计模块的报价来说明NCC和云苍穹价格的区别。从下表可以看到，用友NCC财务会计中多数模块都有基础价格，只有总账和固定资产是免费，而金蝶云苍穹全部模块基础价格都是0。从用户许可的单价来看，虽然二者都是阶梯报价，但是NCC报价高于云苍穹，尤其是随着用户许可数量的提升，云苍穹的单价下降非常快。 3.3.4.云ERP产品向云原生和公有化部署演进 我们对所有厂商的云ERP产品进行了对比，大的趋势是向云原生和公有化部署演进。尽管当前还有很多云ERP产品是单体架构，或者以私有化部署为主，但是各家厂商都在开发云原生ERP，并积极推进公有云部署。我们认为，尽管在相当长的时间内，云ERP的私有化部署仍将占据很大的份额，但云ERP的终极形态可能是公有云，这也是工业互联网数据大融合的基础，因为ERP中沉淀了企业最核心的业务数据。 4. 投资建议中国ERP市场集中度将不断提升，看好提前布局云ERP的本土厂商。推荐标的：用友网络，金蝶国际，受益标的：鼎捷软件，汉得信息，远光软件。 5. 风险提示1）云业务发展不及预期 公司云服务处于高速增长中，未来存在增速放缓的风险，市场预期已高，增速放缓将带来股价较大回撤。 2）企业管理软件行业竞争激烈 中国ERP市场存在SAP、Oracle这类发展时间较长，产品功能强大的海外厂商，也有鼎捷等本土厂商，存在竞争加剧的风险。 （作者：李沐华）","link":"/2021/10/27/%E8%A1%8C%E4%B8%9A%E8%A7%82%E5%AF%9F%EF%BC%9A%E4%B8%AD%E5%9B%BDERP%E5%B8%82%E5%9C%BA%E7%9A%84%E8%BF%87%E5%8E%BB%E3%80%81%E7%8E%B0%E5%9C%A8%E5%92%8C%E6%9C%AA%E6%9D%A5-%E8%BD%AC%E8%BD%BD/"},{"title":"数字化招采趋势","text":"报告编委报告指导人张扬 爱分析 联合创始人&amp;首席分析师报告执笔人张艺蓉 爱分析 分析师李娜 爱分析 分析师外部专家（按姓氏拼音排序）兰希 分贝通 首席执行官林俐 中环洁 副总经理卢佳业 阿里云采销云 总经理孙竹平 阳光印网 首席运营官童懿 天源迪科 副总经理姚一鸣 甄云科技 总裁张瑞 淘宝企业服务 总监张喆 一采通 总经理特别鸣谢（按拼音排序） 报告摘要企业采购数字化转型是大势所趋在企业整个供应链管理流程中，采购是供应链“上游控制”的主导力量。采购业务面临严峻挑战，市场竞争、国家监管要求企业通过成本控制和采购合规管理，来应对外部环境的变化。企业对采购数字化转型问题的重视程度不断提高，表明企业在寻找现阶段面临挑战的应对之道。在企业采购数字化转型过程中，提升企业成本控制水平、流程一体化协同和提升集团整体管控能力是采购业务负责人最关注的三个问题。提升成本控制水平采购成本是在采购流程所涉及的费用，包括直接采购成本和采购运营成本两部分。采购对利润有杠杆作用，采购成本的降低，将带来更大倍数的税前利润增量。企业试图通过上线采购数字化平台，采取物资标品化、流程线上化等数字化手段，有效降低采购成本。实现流程一体化协同采购一体化协同，覆盖从寻源到结算的整个过程，是端到端信息流打通基础之上的一体化。从集团内部和外部角度看，采购协同分为内部协同与外部协同。实现流程一体化协同，一是建立一体化采购网络，实现集团与分子公司的一体化协同；二是基于费用管控解决方案，实现与财务结算部门的一体化协同；三是基于采购系统实现寻源协同，提升全品类寻源效率。加强集团整体管控能力对于企业而言，满足合规需求是刚需。随着合规性要求的日渐严格，公开透明的采购流程、权责清晰的采购管理体系成为企业采购管控亟待解决的问题。加强集团整体管控能力，一是通过建立流程可追溯的企业数字化采购体系，实现招投标阳光化与供应商管理；二是打通集团与分子公司之间的信息流，增强集团管控力度。 目录\\1. 企业采购数字化转型是大势所趋\\2. 提升成本控制水平\\3. 实现流程一体化协同\\4. 加强集团整体管控能力结语关于爱分析研究咨询服务法律声明 \\1. 企业采购数字化转型是大势所趋采购成本是企业成本控制中的主体和核心。在企业的成本构成中，原材料、零部件、服务的采购成本占企业总成本比重随着行业变化有所不同。一般采购成本占比在30%～90%之间，平均占比在60%以上。在经济下行的大环境下，控制采购成本对于企业显得尤为重要。采购是企业经营中的重要组成部分，采购对企业产品生产经营管理起到重要作用。在企业整个供应链管理流程中，采购是供应链“上游控制”的主导力量。供应链中的各个参与者：供应商、制造商、分销商、零售商，相互之间环环相扣。其中，采购扮演着公司与供应商之间的桥梁。很多企业以前采购原材料和零部件，现在扩展到采购半成品，甚至是成品，采购能力成为了其生产经营顺利与否的先决条件。为了帮助企业了解数字化如何助力采购，更为高效的开展工作，以及市场上有哪些最佳实践案例，爱分析针对2021年采购数字化现状展开了系统地调研。此次调研对象主要包括三个代表性行业，分别是：消费品与零售行业、能源与化工、房地产与建筑。与多家采购部门负责人深度交流后，爱分析总结了当前采购业务面临的两大严峻挑战以及应对的解决方案和成功案例。1.1. 市场竞争激烈，控制成本提高利润率乃当务之急零售行业营业收入增速下降，但企业成本相对刚性，这无疑挤压了企业利润空间。在此情况下，企业将视角转换聚焦到了“如何更有效的进行成本控制”这一命题上来。采购作为企业成本控制的主体和核心部分，降低采购成本、提高采购效率，成为企业在外部环境恶化的情况下，缓解生存压力的有效手段。然而，零售行业的采购具有其复杂性。零售行业产品品类丰富，消费者对产品需求在不断地演化和迭代，要求采购能够紧跟需求变化，具体表现为对于采购选品、资源调配的及时性要求很高。同时，零售行业流通体系分布范围广，多地域特征明显，产品经常需要跨区域实现采购调配。如何在如此复杂的采购体系中持续降低成本，零售行业的采购被赋予更高要求。1.2. 多项政策出台，监管愈发严厉，企业应对合规攻坚战过去十年，监管层对于合规管理要求频发，加速了政府、国央企、中小企业采购数字化进程。图 1： 数字化采购的政策频繁出台 国家对于政府、国央企的合规要求带有强制性，是企业经营必须遵守的底线，采购合规管理势在必行。从中纪委巡视反馈的资料、国内民营企业新闻来看，国央企、民营企业中都存在招标、采购不规范，采购中利益输送等舞弊事件，引发了严重的经济损失，带来了恶劣的影响。在此背景下，政府、国央企，都有动力通过实施采购数字化转型，以解决传统采购中信息传递慢、信息没有打通、没有合理的权限管理和监管机制等问题。根据以上分析，我们可以看到企业成本控制和采购合规管理，是企业采购数字化转型的驱动因素。此外，新的政策鼓励方向是数字经济下的产业链协同。十四五规划中提出要“加快建设数字经济、数字社会、数字政府，以数字化转型整体驱动生产方式、生活方式和治理方式变革”，“实施“上云用数赋智”行动，推动数据赋能全产业链协同转型”。其中，采购数字化是产业链协同转型的重要环节。企业在采购数字化过程中，需要解决什么具体的问题，是否存在对应的解决方案，是我们本次报告重要的关注点。通过调研，爱分析发现：提升企业成本控制水平、流程一体化协同和提升集团整体管控能力是采购业务负责人最关注的三个问题。 \\2. 提升成本控制水平采购成本是在采购流程所涉及的费用，包括直接采购成本和采购运营成本两部分。企业试图通过采购数字化，来实现两部分采购成本的控制。采购成本对利润有杠杆效应，同等倍数的采购成本降低，将带来更大倍数的税前利润增量。采购成本下降，节省的部分将直接转变为净利润。采购占销售收入比重越大的公司，杠杆效益越明显。针对直接采购成本和采购运营成本，企业可以采取物资标品化、流程线上化等数字化手段进行有效控制。2.1. 将非标品物资采购标品化，实现非生产物料采购成本控制非生产性物资采购时缺乏统一的标准。物料类别多，采购体系复杂，采购流程不透明，采购金额不可视，各个采购主体无法进行采购成本的核算。通过上线采购数字化平台，企业可以将非生产性物资数据结构化，实现电商化采购，保证了物料材质的统一，减少物料浪费，降低直接采购成本。同时，结合企业物料数据形成素材管理库，通过设置规则，将物料的数据结构化、标品化，可以满足企业多场景的应用需求。企业分支机构在平台采购非生产性物资时，能对接更多供应商资源，提高寻源效率，降低企业运营成本。采购物料寻源时，同一种品类需要采购人员联系多个供应商，效率低。而且，供应商资源通过人工方式联系，选定的供应商在物流时间、采购价格等维度不一定是最优选择。如果能通过SaaS平台横向对供应商信息进行展示和比较，找到需求维度上的最优选择，可以有效降低运营成本。如对物流时间和物流费用要求高的企业，可以通过选择就近的供应商，实现本地生产、本地发货，这样将提高寻源效率，节省人工费用，降低企业运营成本。根据采购数字化平台留存的采购数据，企业可以从全局控制集团各采购单位的采购流程和采购规模，减少不规范、不必要的采购，实现成本控制。形成的采购数据沉淀，也可以为未来优化采购流程、制定新的采购策略等提供数据支持，进一步降低企业运营成本。 采购数字化最佳实践——阳光印网居然之家采购数字化转型背景居然之家（股票代码：000785）是国内市场内少数率先进行泛家居全产业链布局，搭建了全国网络的大型家居零售商，在中国泛家居行业具有市场领导地位。截至2020年底，居然之家门店网络遍布全国30个省市自治区、272个城市，签约门店数量达到706家，累积开店数量达到416家，2020年营业收入近90亿元。居然之家的数字化重心在终端营销和零售环节，有大量促销活动物料采购，印刷品、POP物料等定制品采购，以及相关库存管理、供应链配送等需求。阳光印网帮助居然之家部署了数字化采购SaaS系统，全国范围内300多家门店都可以通过系统下单，实现采购订单管理功能，大大降低采购成本。同时，系统还沉淀了到店率和到店人群销售金额等用户交易数据和用户画像数据，为居然之家提升运营效率提供支撑。除了降低采购成本和沉淀用户数据，系统还整合了财务流程，为客户提供综合财务运营管理服务。居然之家采购数字化转型痛点对于居然之家为代表的零售和消费品行业来说，活动相关物料采购涉及品类多达十余种、采购金额庞大。疫情后消费场景由线上向线下转移，线下门店客流量增大。由于宣传推广的需要，线下门店有大量新增的物料采购需求。以前的采购方式在应对新增需求过程中，效率低下。居然之家的采购流程有以下几大痛点：采购体系复杂，全国300多个不同的门店各自下单，不能保证材质的统一。如果每个门店独立采购的耗材、礼品、服装等等品牌相关的物资标准不统一，将会影响集团公司在消费者心中建立统一的视觉形象。供应商数量多，供应商管理工作任务重。每一个品类需要联系5-10家供应商，需求收集的过程中由于需要统一产品的交付质量、交付时间，供应商沟通成本高、效率低。采购流程不透明，采购金额和采购过程都不可视，无法进行采购成本的核算，采购过程的不可视进一步造成企业财务部的发票核对工作异常繁琐。对于很多全国性布局的集团企业来说，费钱、费时、又费力。建立统一采购标准，降低采购成本阳光印网成立于2011年，覆盖智采咨询、易采SaaS系统、企业采购、企业服务四大业务，是为企业提供市场营销、包装物流、商务馈赠等场景所需定制品的企业综合数字化采购及服务公司。阳光印网企业采购和服务涵盖印刷、包装耗材、礼品、餐饮耗材、综合设施服务等16条产品线，为来自互联网、零售、教育等多个行业客户提供数字化采购解决方案。阳光印网为居然之家定制化开发了易采SaaS系统，适用于居然之家总部和全国各区域门店。易采SaaS与居然之家原有系统打通，数据以接口嵌入，可以随时调用，采购系统数据可以以报表的形式呈现在居然之家原有系统中。阳光印网通过建立采购标准、匹配优质供应商、采购过程透明化等方式帮助居然之家降低采购成本。图 2：居然之家采购系统功能模块 首先，阳光印网通过实施易采SaaS系统，建立了物料采购的统一素材管理，大大降低企业采购成本。居然之家活动物料包括数码广告、印刷品、工服、室内外广告、围挡安装类等。这些物料都属于非标品，一般都有自己独特的设计，需要统一进行素材管理，形成企业统一对外宣传的素材库。阳光印网利用多年的行业经验，将非标品活动物料的特征参数结构化为标准字段和指标，通过客户选填的方式，将非标品转换为标品。在下单过程中，如果客户自行上传的宣传文件与集团设计风格有差异，阳光印网自有设计师会对文件进行矫正，保证活动物料与企业已有的素材库设计风格相一致。由此，居然之家实现了活动物料材质统一、设计元素统一，减少了物料浪费，有效控制采购成本，保障全国不同区域的宣传物料质量统一，保障全国统一的高质量形象宣传。图 3：建立物料采购的统一素材管理，覆盖85%非核心定制品需求 其次，阳光印网为居然之家优化了供应商管理体系，实现了响应及时，质量好，标准化程度高，并且可以按区域和门店匹配，做到本地生产，本地发货的供应链。居然之家原来管理众多供应商，现在只需直接向阳光印网提出采购需求，就可以就近匹配供应商资源，降低供应商管理成本。同时，阳光印网还在自动外发、物流、仓储方面对居然之家提供助力。根据区域不同，居然之家成本降低幅度有所不同，普遍达到了5-10%的有效降本。第三，实施易采SaaS系统之后，居然之家总部可以直接获取各分公司的采购和下单数据。一是有效解决采购过程不透明、事件不可追溯问题。二是通过数据采集，完整记录采购成本、采购需求等关键信息，为之后的采购决策提供数据支持。此外，阳光印网的易采SaaS系统还可以沉淀到店、交易等用户数据，以及通过与财务系统打通，降低财务发票核对成本。未来，阳光印网还将利用沉淀多年的行业经验，为居然之家提供针对性的采购增值服务。一方面，阳光印网将帮助居然之家进行店面升级改造，做亮化和导视的全国门店统一更新，帮助企业门店视觉统一、品牌统一。另一方面，阳光印网将根据过往沉淀的采购数据，分析居然之家历史供应商报价，分析判断居然之家采购是否还有降本空间。 2.2. 从线下到线上转移，通过自动化实现流程优化在传统采购模式下，业务单元之间的沟通主要在线下进行，沟通时效性差，需求信息很难快速同步。采购执行覆盖从采购到结算的整个业务流程，涉及合同签署、票据核对、报销等采购管理流程。在传统采购模式下，各环节均由人力完成，消耗大量人力及时间成本，且出错率高。采购数字化平台将线下业务搬至线上，解决了各业务单元线下沟通协作差的问题，并通过流程优化减轻了采购人员的工作量。同时，采购数字化平台不是独立的烟囱系统，而是在建立之初就可以打通企业ERP、SRM、OA等系统，实现底层数据的互联互通。通过覆盖采购全业务流程，采购数字化平台也能够简化财务、业务等其他部门人员工作量，自动化处理开票、报销等工作。 大型国央企在建设采购数字化平台时，由于合规以及数据安全等考量，往往倾向于采购定制化的采购数字平台。采购数字化最佳实践——天源迪科一、国电物资采购数字化转型背景国电物资集团成立于2003年，是国家能源集团所属的大型专业化物资公司。国电物资集团担负着集团招标代理、询比价、集中采购、电子商务平台建设和运维等业务。天源迪科成立于1993年，公司长期致力于自主创新的软件开发，为电信企业和政府提供最佳的管理信息系统解决方案，是国内领先的软件产品和服务供应商。2017年，国电物资集团携手天源迪科创新打造了国家能源e购平台。平台实现集团物资招标采购100%集中、100%上网、100%公开的管控目标，构建了行业领先的“集中采购、区域配送、物资超市”三级物资供应保障体系。平台包括“招投标、询比价、商城”三大板块，开辟了电力专业产品电商化采购新模式。图 4：国电物资采购数字化平台三层云化架构 二、国电物资采购数字化转型痛点企业采购流程从线下到线上转换的需求是清晰且真实存在的。企业线下采购环节复杂，各个部门存在重复数据，浪费存储和计算资源。采购业务标准不统一，成本高。业务数据孤岛问题严重，数据利用率低。综合性采购平台的建立需要有专门的行业知识和丰富的平台构建经验来实现。天源迪科针对这些问题为国电物资构建了基于业务中台、数据中台、技术中台的三层云化架构，和针对业务流程建设的采购业务板块。此架构帮助企业避免大量的系统重复开发、重复建设而导致的复用性低、效率低、用户体验不统一的问题，将目前业务中大量可复用的功能和场景进行梳理，提供多种行业一体化的采购解决方案。图 5：国电物资采购数字化系统业务架构总览 三、为客户定制化开发三大采购的功能板块，建立了从线下到线上转移的综合性采购业务平台\\1. 对于不同的采购物资设计了不同的采购模块。生产性非原料物资，创新性的设置了电力专区、煤炭专区，实现了协议物资模式线上化，充分发挥集约化、规模化采购优势，进一步降低采购成本，提高采购效率，保证采购质量，打造行业专业性物资采购平台。对于MRO类等非生产性物资采购，通过统一API接口实现多家电商的技术和业务对接，接入京东、苏宁、得力等电商，实现了商品协同、订单协同、结算协同的“一站式”购物体验。对于其他物资，还建立了员工福利、闲置物资、扶贫相应的板块，为内部的消费者提供购买物资渠道。图 6：采购物资分类 \\2. 针对于招投标采购和非招投标采购，分别设计不同的流程以满足不同的业务需求。对于“招投标”板块，实现全流程规范化、结构化、电子化，支持招标公告发布、招标文件发售、网上澄清、网上投标、网上开标、在线评标、费用管理、电子归档、行政监督、统计分析等全流程业务功能，可同时支持包括火电、水电、风电等在内的9种工程类型，主机、辅机等11种项目类型的全流程网上开、评标。根据《非招标采购方式采购代理服务规范》进行设计，覆盖物资类、施工类、服务类等所有业务类型，包括询价采购、谈判采购、竞价采购和单一来源采购等采购方式，综合多种采购方式和采购计划，可以做到全网同步，提高寻源效率。\\3. 供应商管理实现了招标、询比价、电子商场供应商的全生命周期管理。建立了“四库一平台”，包括供应商基本信息库、资质库、业绩库、价格库，以此建立明确的准入机制，接入工商、法院风险信息、实现智能化审核、将发现的不良行为记录留存，通过与供应商合作的过程中，不断去评价和迭代供应商诚信度数据，实现统一管理。\\4. 数据应用充分挖掘大数据价值，满足不同层级管理和运营的可视化需求。借助云计算、大数据技术，通过报表、图表和实施。可以对集团采购的总量有总体认知，帮助企业实行采购的统一管控。统计集团累积交易额、归属于某供应商的累积交易额、周期性交易数据、采购计划完成情况、采购机构平均时长/平均负荷。另外，也可以对新发生的某一笔具体订单情况进行实时查询和追踪。四、解决方案能降低采购成本，提高采购效率，减少违规行为1）降低成本，年均采购金额巨大，极大降低了招投标各方的费用成本。三大采购平台提供“安全、优质、高效、廉洁”的采购环境，服务于上千家采购企业和10万余家供应商，年均采购金额超过700亿元，实现了物资采购“100%集中、100%上网、100%公开”的目标。从平台数据显示，自平台投运以来，共计挂网1.43万个包，共计投标6.58万人次，总计收到投标文件19.76万份，累计归档电子文件16T。累积注册招标人930家、供应商2.2万家；评标专家库内共有专家5800余人。平台的上线使用，极大降低了招投标各方的费用成本，每年可为招标人节省约12亿元采购成本，每年可为投标人节省2.4亿元投标成本，每年可为招标代理机构节约1150万元招标成本。2）采用集中采购方式，解决了一单一采、多次挂网等造成的采购效率低下问题，大大缩短采购周期。另外，商城通过公开招标方式选择资信良好、质量上乘、价格合理的供应商在商城铺货，并定期对商品质量进行跟踪调查，保证商品质量有保证的同时又大大降低采购成本。3）国家能源e购商城还实现了制造企业的库存信息共享，减少违规行为。平台打通了备品生产线和电厂线检修线，并着力坚持源头防范和控制供应风险，通过现代技术手段防止人情采购、暗箱操作、指定采购等违规行为，实现了业务公开、过程受控、全程在案、永久追溯，避免了业务运作过程中可能出现的随意性和倾向性。五、解决方案亮点1）平台开发过程中对业务逻辑理解透彻，创新性的建设了电力行业垂直采购平台。天源迪科借助已有大型企业的采购系统开发和实施的经验，在此次解决方案实施中，建设了国家能源e购电力专区，是中央企业电子商务独树一帜的专业板块，填补了发电领域备品电商采购的空白。2）建立了体系化的供应商管理的标准。建立供应商基础信息库、资质库、业绩库、价格库，对供应商进行全生命周期服务与管理。加强对供应商评级以及不良行为管理，对接工商、法院，实现智能认证，支持按照金额对商品采购行为进行控制，建立黑名单，实时掌握供应商履约情况，动态调整分级，保障采购活动“好中选优”。3）建立了一体化、智能化交易平台。纵向贯通铺货、下单、配送、验收、结算和供应商评价等业务流程，横向集成招标、财务、税控、物流、工商等周边系统，实现智能比选、智能对账、智能信用认证和动态直播等功能，为客户提供全方位、一站式交易服务。4）不断尝试帮客户拓展新的业务场景，不断扩展供应链系统的外延。业务板块包括：内部电商项目、员工福利采购、科研项目的招投标、差旅、闲置物资的调剂。面对下游的采购商城，可以实现扶贫、员工福利、电商采购等功能。5）提高公司数据能力。数据模块包括：报表中心、经营分析系统、业绩大屏、决策支持系统等。不仅仅能够反映当前业务的全貌，同时也为今后数据中台产品能力向外部输出提供数据基础。 中小型企在建设采购数字化平台时，更注重预算可控、上线速度快、迭代频率高，倾向于采购SaaS平台。采购数字化最佳实践——淘宝企业服务一、淘宝生态内中小微企业采购数字化转型背景根据媒体报道，我国已有超过1亿3000万的市场主体，其中个体工商户数量超过9000万。中小微企业作为其中规模最庞大的群体，来自各行各业，具有广泛而复杂的采购需求。从第一产业的农业投入品，到第二产业产业链上下游的物资，再到第三产业的实体与虚拟服务，中小微企业的采购数字化是B2B行业的最主要的课题之一。中小微企业有降低采购成本，提高采购效率，在竞争中脱颖而出的驱动力，采购数字化需求与日俱增。淘宝企业服务是淘宝旗下的中小微企业专业采购服务平台，目前包括工业品、商用服务、行政办公、现代农业、面辅料集采及服装定制等宽幅业务场景，覆盖了淘宝内22个一级类目，累计了超过3000万的淘宝企业会员。2020年，诞生了淘宝新千亿市场工业品，以及办公家具、现代农业、来图定制等多个新百亿市场。淘宝企业服务由淘宝消费类电商衍生而来，利用阿里巴巴体系内大量的C端积累的庞大用户基础与供应链生态优势，在拓展B端用户时，用户对品牌的信任感带来低成本的转换，具备天然的客户群资源优势。淘宝企业服务为中小微企业提供了兼具“灵活性”与“确定性”、服务种类多样、生态资源丰富，为中小企业赋能的企业采购平台。二、中小微企业采购数字化转型前的痛点1）中小微企业需求复杂度高，市场上缺乏专门为其服务的平台。中小微企业的采购需求表现出采购量小、多样化、灵活定制的特点，相对来说更加小众，成本大，利润回报低。如饮品店的杯子定制起订量一般以1万件起，而非连锁性饮品小店每月售出量约为2000杯。如何找到合适的供应商、对采购需求的响应是否敏捷、采购价格都是否合理是中小微企业关注的问题。2）中小微企业对供应链的议价与管控能力较弱，无法保证采购供应的确定性。采购效率与采购管理直接影响着企业的生产，中小微企业对于供应的质量与稳定性有不弱于规上企业的需求。例如：在采购电子元器件等带有期货性质的工业品时，中小微企业限于体量，话语权弱，能不能获得实际控货权成为影响生产和销售的关键要素。3）中小微企业相比规上企业商业模式单一，融资困难，现金周转压力更大，难以建立信誉度以获得金融服务。能否有融资贷款类的供应链金融服务来对应日常存货周转问题，降低营运资本，获得更长的账期，是缓解中小微企业现金周转压力需要解决的问题。4）中小微企业急需加强与采购上下游协同的能力。采购品类要求非常丰富，是否有足够多的上游供应商能够满足品类的要求，直接影响其经营能力。下游的渠道销售能力、买家的关注也是中小微企业采购关注的重点问题。企业需要获得更多及时、快速的信息，更多的品牌曝光、拥有更多的上下游的资源。三、数字化能力提升后，中小微企业采购成本降低，提升企业运营效率1）以采购者价值设计为核心，上线“权益中心+工作台”的中小微企业采购产品。淘宝企业服务官方频道是淘宝APP内唯一的企业采购服务平台，一方面，围绕企业会员的采购需求，为企业会员提供企业会员价、大牌专享、清仓特权、低价补贴等多种权益体系，让中小微企业采购也能享受大客户价，为其降低采购成本；同时，淘宝企业服务官方频道还通过常购清单、我的供应商、采购排行榜等多种采购工具，提升中小微企业的采购效率。2）淘宝企业服务的平台上已经汇集了超百万的供应商，包括工业制造业、商业服务业、现代农业等品类。7*24小时在线为中小微企业采购者提供专业化、场景化、定制化的行业解决方案，形成了“用户驱动、供给整合、撮合交易、关系沉淀“的创新型业务模式。3）打造便捷交易与金融服务链路，解决中小微企业现金流问题。现金流紧张是中小微企业发展中的一大紧箍咒，传统采购中的账期赊购模式使得供应链形成了一定程度的牛鞭效应。淘宝企业服务为此打造中小微企业专属金融服务产品“采销宝”，为平台上的供应商和采购者均提供平台账期，极大地缓解了中小微企业的现金流压力，并且成为供应商CRM的一大利器；此外，淘宝企业服务还联合支付宝、网商银行等生态伙伴为中小微采购者提供因公付、大额转账等畅通的交易链路。4）淘宝企业服务联合钉钉组建淘宝用户组织，建立平台能力以实现对高价值买家的深度运营。淘宝企业服务基于淘宝和钉钉首创“半私域撮合”场景，实现了三大突破创新：1）更精准的需求撮合与匹配，基于用户的采购需求建立钉钉的服务群，平台优选供给在钉钉群服务买家需求；2）基于钉钉强大的办公协同能力，为买家提供寻源报价等工具，为供应商提供CRM管理、直播订货会等能力，提升采购效率；3）平台依据行业场景深度定制内容开展内容运营，并提供码上收、采销宝等工具产品，提升了对中小微采购者的专业服务能力。5）围绕企业与上下游的采销协同，构建供应链协同网络。对于企业来说，它的买家身份与卖家的身份是同时存在的，因而存在采购与销售的双向需求。在淘宝企业服务，百万级的供应商，超过3000万的企业会员，数亿级别的买家之间形成了复杂的采购与销售网络。淘宝企业服务通过对用户场景的拆解，并对导购、交易、支付、金融、物流等方面进行产品基础设施建设，构建淘宝内的供应链协同网络，以实现企业与其上下游的采销协同。同时，阿里巴巴拥有线上完善的B类业务生态，覆盖了最广泛的线上企业身份用户，每个企业都有可能成为供应链协同网络的节点并从中受益，这是淘宝企业服务长期增长的机遇所在。图 7：淘宝企业服务为客户建设供应链协同网络 \\3. 实现流程一体化协同 采购一体化协同，覆盖从寻源到结算的整个过程，是端到端信息流打通基础之上的一体化。从集团内部和外部角度看，采购协同分为内部协同与外部协同。内部协同的需求主要是大型企业跨业务部门之间的协同，如与分子公司的协同、与财务结算部门协同。外部协同是指与供应商之间的协同，如招投标供应商线上沟通、供应商线上对账等。采购数字化系统的建立，能从底层打通集团不同系统中的数据，实现信息的传递，形成集团与分子公司、各个业务部门之间，以及与供应商之间的沟通机制，进一步实现集团内部和外部的采购协同。图 8： 采购流程中的协同 3.1. 集团与分子公司的一体化协同，建立一体化采购网络大型企业组织机构复杂，采购效率低，需要建立内部协同机制，形成集团与分子公司采购的统一管理。大型企业往往存在多种业务单元，不同的业务单元分布地域广，业务单元信息传递效率低。在数据传达上，集团总部与下属机构之间多以手工发送Excel工作表方式沟通，信息传递过程中的时效性和准确性无法保障。在采购的权限划分上，分子公司往往自行开展采购业务，总部只控制总采购预算金额，没有建立统一的供应商资源库，最终导致各个子公司形成自身的采购供应商池，无法进行供应商资源共享进行协同管理。比如，中国航空集团有限公司是由中央管理的国有特大型企业，在2008年11月由原中国航空工业第一、第二集团公司重组整合成立，下辖100余家成员单位、23家上市公司。传统采购模式下，集团集中采购沟通不及时，采购需求澄清效率低，且部分子公司供应商资源掌握在当地采购主管手中，数据不互通，无法协同管理。对于大型企业，要解决集团内部采购协同问题，更侧重梳理一套完整统一的采购流程，完善内部管理系统和沟通机制。目前大型企业传统的采购管理模式主要是分谈分签分购模式，采购数字化转型背景之下，企业更倾向于转变为统谈分签分购的模式，由总部采购牵头进行集中采购，实现与子公司采购人员的协同，相互配合完成采购。图 9： 统谈分签分购 采购数字化最佳实践——阿里云采销云中国联合水泥集团（下文简称“中联水泥”）是中国建材集团的核心企业，是全国水泥行业龙头企业，也是国家重点扶持的特大型水泥集团。中国联合水泥年营收超过千亿，年采购额高达300亿，主要以生产性物资为主（包含原材料）。响应国家政策，中联水泥推进数字化采购项目中国联合水泥集团所属的中国建材集团作为重点央企，集团发展方向受政策影响明显。响应合规与数字化转型政策，中国建材集团着力推进数字化转型工作，采购数字化是数字化转型的重要维度。在政策推动之下，同时考虑采购业务实际需求与挑战，中联水泥同时推进数字化采购项目。中联水泥在采购方面的主要挑战有：一是管控方面。中联水泥集团下属100多家企业，由于企业合并背景等原因，下属企业采购业务流程尚未统一，集团内部企业间物料信息、供应商信息等未打通，存在信息孤岛，集团无法及时、全局性了解下属企业采购业务全貌，对子公司采购业务管控较弱，存在合规风险。二是协同方面。子公司分布较广，供应商资源分散，线下沟通时效性差，难以及时共享或响应采购需求，无法形成集团层面采购协同；线下采购供应商资源有限，尤其是部分标准化程度较高的生产性物资及非生产性物资，需扩大供应商寻源半径，提升寻源效率。三是成本方面。子公司自有供应商地域性分散，集团层面尚未共享供应商资源，无法匹配最佳采购供应商，导致采购成本高。比如，南京中联的一家工轴供应商价格较低，但由于协同性较差，徐州中联无法共享南京中联供应商资源，导致采购成本偏高。应对采购管理挑战，落地采购数字化，中联水泥选择与阿里云采销云合作，并参考烟台万华采购系统推进采购数字化项目。阿里云采销云属于阿里云旗下专注大型企业采购数字化解决方案，提供涵盖协同工具、供应商资源、数据增值服务三方面的采购全链路解决方案，通过提供标准和可定制的灵活解决方案，满足大中型企业的采购数字化需求。图 10：阿里云采销云企业采购方案 “管理模式+采购平台”解决方案，聚焦中联水泥内部协同中联水泥作为大型国央企，采购业务复杂，并不仅仅是上线采购系统便可落地数字化采购，需要从采购业务梳理切入，开展采购数字化项目。首先是管理模式的转化。中联水泥原采用分谈分签分购模式，为加强采购管控，中联水泥结合采购业务全链路上线调整管理模式，落地统谈分签分购模式。中联水泥结合中联水泥管理模式需求，从集团层面进行采购业务流程的重新梳理，制定流程上线方案并作数据应用规划，自上而下全面推进采购数字化。然后是全品类梳理。在采购业务全面上线过程中，品类梳理也是非常重要的一环，主要因为不同物料品类采购策略各有差异，需要整合集团采购全品类进行梳理并确定差异化的上线策略、上线步骤等。中联水泥有三级采购目录，一级是集团采购目录，二级是运营管理采购目录，三级是企业自采目录。一级目录集采性物资基于内部商城实现线上采购，一级、二级目录的部分生产性物资则通过招投标实现线上采购，三级目录基于寻源模块进行采购。基于业务品类梳理，阿里云采销云为中联水泥搭建采购管理平台，平台覆盖从需求到结算支付采购全流程，通过寻源和内部商城两大业务场景，满足企业各类物资采购执行和管理需求。寻源采购场景属于典型的集中采购场景，如大宗物资、计划/项目制采购；内部商城采购场景服务于重复性需求物资采购执行，如集团集采后内部分采。内部商城支持对接中联水泥集团自有供应商、电商平台以及1688工业市场、工业品牌站、基建云采购等阿里系商家商品资源。图 11：阿里云采销云通过寻源和内部商城两大业务场景，满足企业各类物资采购执行和管理需求 由于涉及到管理模式调整以及采购业务流程的统一调整，从集团到下属子公司的推广落地，面临诸多挑战。首先是制定推广策略，需要根据中联水泥的实际情况，确定采用分地域推广或是分阶段推广，更进一步需要确定从数字化转型积极的子公司切入或是从采购体量大的子公司切入；同时需要与子公司高层的反复沟通以及对员工的专业培训。阿里云采销云凭借多年的大客户服务经验，顺利实现采购系统推广，项目开展第一年（2018年）实现集团采购业务上线率90%以上。供应商深度运营，为中联水泥精准匹配优质供应商对于中联水泥此类大企业而言，物资采购尤其是生产性物资采购有明确的质量要求，因而采购平台上的部分供应商资源对大企业的价值度不高，大企业更关注私域供应商资源运营。阿里云采销云针对大企业的供应商资源，从准入开始严格管理商家资质，全流程交易信誉评估和信用档案助力买家精准匹配优质供应商。阿里云采销云为中联水泥建立私域供应商资源库，包括中联水泥现有线下供应商以及1688平台优选供应商；同时对供应商进行分级管理，从资质能力、交易量、活跃度等多个维度量化动态评估，评级以进行精准推荐及风险控制。目前已经建立包括中联水泥在内200多家集团公司的供应商资源库，供应商资源达到1000多家。阿里云采销云下一步打算构建行业供应商库，比如整合水泥行业的大企业供应商资源，建立行业供应商资源库，大型企业之间可共享供应商资源。图 12：阿里云采销云供应商深度运营 除此之外，阿里云采销云为中联水泥提供潜在供应商运营服务。对于潜在的优质供应商资源，采购平台运营人员会持续关注大企业采购需求，采用线上线下通知相关供应商的方式激活供应商；同时阿里云采销云还会与政府或当地品牌商组织线下展会，挖掘更多优质供应商资源。采购业务上线，实现流程合规与全面协同目前，中联水泥集团90%以上的的采购业务实现线上化，全品类参与网络采购，从2019年10月开始做数字化采购累计线上采购规模100亿以上，中联水泥实现流程合规与全面协同。中联水泥集团100余家子公司全部上线采购系统，采购数据和财务数据的信息已经全面共享，集团总部可对整体采购业务有全局性的了解，加强对下属子公司的管控；同时，集团公司采购流程严格按照中联水泥集团的组织架构设置，流程统一，权责清晰，采购数据全程可追溯，采购环节阳光透明，满足国家对国央企采购业务合规化的要求。同时，采购业务线上化，采购效率明显提高，线上招投标节省40%-60%的时间成本，采购商城实现集采物资、MRO等长尾物资采购，寻源效率提升明显；与此同时，中联水泥集团从各区域到总部的采购人员事务型工作减少，采购人员可专注于更有价值的工作。再次，在成本的降低方面，主要在于供应商资源的拓展。首先是分子公司供应商资源共享，实现部分物资（主要是非生产型物资）跨地域供应，可寻求价格最优供应商；其次是需求协同实现集团集采，内部商城厂商直供货源，单品最大节省18%；最后是整体寻源采购成本平均节约率10%-15%。未来，中联水泥与阿里云采销云在接入ERP全面打通数据流、深入挖掘采购数据价值、大企业共享供应商资源、实现物料编码和供应商编码的统一等方面有进一步的合作。 统谈分签分购模式下，要求总部与子公司实现需求、供应商等信息的联通与传递，使集团总部可以进行集中管理，同时分、子公司可以基于统一采购平台实现分采。因而需要依托采购系统，将各个子公司的采购体系连接起来，形成统一的采购网络，支撑统谈分签分购管理机制落地。 采购数字化最佳实践——甄云科技宁波东方电缆股份有限公司（以下简称“东方电缆”）是国家级高新技术企业、国家创新型企业，于2014年10月15日在上海证券交易所主板挂牌上市。公司承担了3个国家863计划项目、1个国家科技支撑计划项目和3个国家海洋经济创新发展区域示范项目，并牵头起草了海底电缆国家标准，是电缆行业龙头企业。2020年实现营业收入50.52亿元，同比增长36.90%。对于制造业企业而言，采购在企业运营中扮演重要角色，供应链协同能力建设至关重要。东方电缆作为高新技术企业，面临业务高速增长的契机，东方电缆原有采购模式多以线下方式进行，无法满足业务发展需求，基于数字化转型推动采购协同的需求明确。当前，东方电缆面临的主要采购业务挑战如下：一是协同方面。在内部协同方面，原有采购模式下，需求部门在ERP提报采购需求，利用钉钉与采购部门进行需求沟通，采购需求协同性差，沟通时间成本高。在外部协同方面，供应商资源分散，与供应商之间信息流尚未打通，与供应商的协同沟通业务往来完全在线下开展，不利于实现供应链协同，采购效率低，在部分场景也会导致采购成本高。比如，在合同管理方面，东方电缆原采用线下方式进行合同签署管理，签署周期长，而对于部分物资而言，价格波动频繁，合同签署不及时会导致采购成本提高等问题。二是支出管理层面。采购信息流尚未打通，业务数据无法高效流转，且数据可视化程度较低，导致决策层不能实时掌握采购支出等情况，采购支出决策数据支撑缺失，无法实现业务的数字化敏捷、有效管理。面对采购业务挑战，数字化采购成为东方电缆顺利开展业务的必然选择。采购数字化转型并非仅仅部署一套采购系统那么简单，尤其对于制造业而言，采购品类、流程复杂，采购数字化转型最重要的是贴近业务需求。因而东方电缆与甄云合作，寻求契合企业采购模式需求的落地解决方案，并上线一体化数字采购管理平台。甄云科技成立于2017年，为汉得孵化的采购数字化管理平台提供商。甄云科技的主打产品甄云SRM，覆盖全品类采购，包含供应商管理、战略寻源、敏捷协同、采购商城四大套件。截止目前，甄云科技已经为30多个行业600多家的中大型企业提供云部署采购管理平台、咨询及实施服务。剖析客户痛点，提供一体化数字采购管理平台甄云科技根据东方电缆整体数字化转型规划及实际业务需求，梳理不同业务部门的采购流程，制定不同业务上线策略，并建设符合其公司战略发展及供应商之间沟通和管理业务需求的采购信息化管理平台。甄云SRM覆盖全品类采购，提供SaaS云部署和本地部署的供应商管理、战略寻源、敏捷协同、采购商城四大套件，采购平台深度集成ERP、钉钉，打通实物流、信息流、资金流，采购供应核心业务全流程线上协同。图 13：甄云SRM解决方案 首先，甄云方案支撑东方电缆全场景上线管理。采购全场景涉及全流程、全模式、全品类三个维度：全流程主要基于甄云产品端到端的覆盖度，同时甄云科技与百度、斯睿德、达观数据、E签宝、百望、快递鸟、Oracle ADW等达成战略伙伴关系，生态协同水平高；全模式是指支持不同采购场景，对于像东方电缆这样的制造业企业，有生产性物资与非生产性物资，不同物资品类对应不同的采购模式采购场景，采购场景可达上千种；全品类是指东方电缆全部生产性、非生产性物资逐步实现线上采购，针对全类型物资建立统一的采购策略标准规则，通过系统自动判断生成采购模式、采购方式和执行主体等，并进行流程控制和风险提示。图 14：东方电缆非商城采购模式及流程 图 15：东方电缆商城采购模式及流程 其次，甄云方案可实现供应商全生命周期管理。对于东方电缆制造业企业而言，采购是维持企业正常生产运营的关键，颇为关注供应商管理。针对东方电缆的供应商管理需求，甄云提出供应商全生命周期管理方案，能够通过闭环的供应商管理体系，包含供应商准入、供应商生命周期管理和供应商绩效考评等内容，全方位进行供应商的管理，建立更加完善的供应商体系，提升企业供应商管理水平。另外系统可以整合风控数据，动态化监控供应商风险，实现风险前置预警，提升供应商质量及供货安全，确保企业持续运营。同时，在部署实施方面，甄云SaaS系统颇具优势。东方电缆作为制造业企业，与同行业企业采购流程基本一致，甄云SaaS产品适应全场景、全品类，定制化占比不超过5%。同时甄云推出甄-CRP实施方式，包含启动、CRP验证、迭代实现、部署、持续更新，基于此实施方式，客户可以快速上线采购系统，后续可以持续迭代升级。对于制造业企业，采购场景复杂，随着数字化进程的深入，会有各种各样的新模式新场景，甄云持续迭代的模式可以支撑客户采购系统能够更快适应场景变化需求。数据打通、全流程线上化，助力东方电缆实现采购敏捷管理现在，东方电缆已经实现原材料、非生产性物资的线上采购，按照东方电缆采购项目规划，2021年将实现全品类全业务线上管理，全面满足东方电缆的采购需求。在协同方面，基于采购系统打通信息流，实现与内部部门、外部供应商的全链路协同，比如基于供应商管理，实现与供应商高质量协同，控制供应链风险；同时全面提高采购效率，效率提升重点体现在合同管理、采购商城寻源，比如合同管理，上线至今已在线签订1600余份合同，整体提效大约40%。在支出管理方面，通过采购系统承载业务数据，打通信息流沉淀采购数据，并应用大数据、AI等技术形成多种报表模型，使得采购成本更加清晰透明，同时利于输出决策报表，采购支出层次清晰，数据明了，管理层做出决策更加有据可依。基于数字化采购系统，东方电缆实现敏捷协同，互联互通，实现采购企业与供应链伙伴之间深度协同，提升效能，构建更合规、更高效、更智能的数字化采购体系。 3.2. 与财务结算部门的一体化协同，提高费用管控的效率采购部门需要与财务结算部门进行协同。采购执行流程中，订单、发货、结算等环节，涉及到的财务结算工作包括：收发货管理、对账、发票核对、费用报销等。在传统采购模式下，各环节均由人力完成，涉及到大量的单据确认、单据之间的核对、金额的计算，费时又费力。涉及员工报销时，财务环节同样有大量琐碎工作，效率低下。动力源是一家致力于电力电子技术及其相关产品的研发、制造、销售和服务的公司。公司业务遍布全球，各地均设有办事处，销售人员出差频繁。目前员工差旅费用报销主要是自行垫付，员工需要通过OA系统将纸质发票的发票号、金额等信息手动输入，再提交审批报销流程，报销周期长达1-3个月。采购流程和财务结算流程割裂，冗长的审批和报销流程导致业务流和资金流的不一致。图 16： 复杂报销流程 费用管控解决方案目的是建立企业集中对外支付的账户，适合于包括差旅、采购商场、员工福利等在内的费用支出场景。费用管控平台可以与包括统一支付平台、财务软件、发票平台、第三方消费平台等在内的企业办公平台与业务系统之间对接。费用管控从“事后费用报销”到“事前费用管控”，助力企业实现费用管控模式改革。原有费用报销核心流程包括费用申请、提交单据、流程审批、出纳支付等流程；采购数字化建设费控平台之后，流程为事前预算、事后控制、事后分析，形成了采购部门、业务部门与财务结算部门之间的协同。图 17： 费用管控平台与生态 采购数字化最佳实践——分贝通人瑞人才成立于2010年，是国内顶尖的专业一体化人力资源服务公司，同时也是中国最大的灵活用工服务企业，旗下业务包括中国最大的灵活用工服务，O2O招聘平台，及其他HR服务如BPO、培训等。自成立以来，人瑞人才抓住新经济产业发展的机遇，与包括字节跳动、腾讯、滴滴、蔚来等新经济领军企业达成战略合作，人瑞人才2020年实现收入28.30亿元，同比增长23.7%，公司增长远高于行业增速，具有高成长性。人瑞目前在全国开设31家分公司及机构，业务覆盖150个城市，拥有员工600+，以及近30000名在岗外包员工。自有员工和外包员工的人数众多，且采用中心化的财务管理方式，集团总部进行统一报销管理，公司的费用管理面临巨大的挑战：一是对于财务部报销工作繁重，集团财务部承担全部报销工作，员工数量众多、票据量巨大，财务审核、验票、打款等事务性工作量的压力巨大；二是内部员工报销体验差，员工垫资，且全国各地员工需将报销的票据邮寄至总部，财务部门审核、放款，流程时间长；三是外包员工报销工作更加复杂，每个月需要驻场统一收集发票并核验真伪，再统一提交至总部报销，工作量大、报销速度慢，外包员工对此体验较差；人瑞人才针对费用管理难题，选择与分贝通合作，推动采购数字化转型，通过线上化、数字化的管理方式实现总部财务对各分校费用支出的敏捷化管理，加强企业支出管控。分贝通成立于2016年，定位下一代企业支出管理平台，通过“费用+支付+场景”三合一的企业支出管理模式，帮助企业实现一站式支出，全流程费控的数字化支出管理，同时平台接入上百家企业消费供应商，无死角覆盖企业全部消费场景。分贝通主打高成长性新经济企业客群，截至目前，已经服务超过上千家中大型企业。分贝通为人瑞人才提供“费用+支付+场景”的一站式解决方案，以事前管控代替事后报销，以企业支付代替个人垫资，可以覆盖差旅出行、企业用车、企业用餐、补助福利、企业采购、企业服务等企业支出场景。图 18：分贝通解决方案 “费用管控+企业支付”，革新支出管控模式分贝通解决方案以“费用管控+企业支付”为核心，基于支付的费用管控系统覆盖企业支出事前事后全流程，更为高效、节约地控制费用支出。基于分贝通支出平台实现事前费用管控，企业可预设规则，基于支付和场景的多维度管控规则，满足企业对费用管控的个性化需求。基于分贝通支出平台实现对公付款能力，通过分贝通App付、网银付、虚拟卡付三种支付方式，将人瑞人才对公银行账户与分贝通快捷支付绑定，实现全场景企业支付，无需员工垫资报销，革新传统支出管控过流程。同时分贝通支出平台可以与人瑞财务系统对接，实时同步订单，并按月输出完整的费用报表，人瑞人才可根据详细报表分析项目的支出成本，进行多维度数据分析，帮助企业实时了解支出可以满足高成长企业对费用精细化管理的需求，提高客户管理效率和严谨度。图 19：基于分贝通支出平台实现企业支付 深度赋能业务场景，提供一站式支出管理分贝通支出平台覆盖差旅出行、企业用车、企业用餐、补助福利、企业采购、企业服务等企业高频费用支出，聚合100+供应商资源，提供一站式的消费支出管理。人瑞人才商旅、加班打车、商务用车、到店宴请用餐、加班外卖，均从分贝通平台一站式预订、消费。在企业采购场景，分贝通为人瑞人才提供在线采购商城服务，分贝通有自营商城，同时对接京东、苏宁平台，企业总部能可按照各分校采购需求统一集采，包括办公用品、市场礼品、节假日福利礼品等。针对需求量小，质量要求严格的物品采购，分贝通还提供给了线下定制化采购服务，帮助寻源，进行定制化服务。全部采购支出按照预算执行，企业统一支付，分贝通统一结算，发票自动导入财务系统，全流程在线化，数字化管理。图 20：分贝通支出平台覆盖企业高频费用支出场景 解决费控难题，人瑞人才实现财务敏捷管理自2018年上线分贝通支出管理平台至今，人瑞人才实现一站式支出管理，全员费用支出均在分贝通平台执行。分贝通支出管理平台为人瑞人才在财务管理方面带来极大改善与便利，也让财务管理更加的严谨高效。首先，基于分贝通支出管理平台实现统一结算入账，提高财务效率。分贝通与企业统一结算，提供统一发票，财务无需逐一核对发票的真伪；同时分贝通提供发票的同时给出详细的对账单，按照系统中的分类自动导出凭证，使得财务入账凭证数量大大减少，极大降低了财务的工作量，提高财务效率。然后，以企业支付代替员工垫付，企业统一支付，员工无需再垫付、报销。原报销时长超过1个月，基于分贝通支出平台无需报销，内部员工、外包员工满意度得到极大提升。最后，将费用审批前置化，保证费用真实的同时极大的简化流程，灵活用工项目的客户满意度得到了很大的提升，也成为销售打单的有力武器。 3.3. 基于采购系统实现寻源协同，提升全品类寻源效率按照卡拉杰克模型，物料品类按照可以划分为战略型物料、瓶颈型物料、杠杆型物料、交易型物料。不同物料品类确定供应商，都需要经过招投标或询比价过程，其中涉及与供应商的多轮评估与谈判。寻源过程中能否实现与供应商的线上沟通、如何拓展寻源半径、如何形成寻源的精准匹配，是衡量寻源效率的具体指标。图 21： 品类特点及寻源需求 不同物料类型对于拓展寻源半径的需求各有不同： 战略型物料、瓶颈型物料，比如化工品中的上游大宗商品，锅炉行业的专有设备。这类物料一般来说供应商关系稳定，采购对于扩展寻源资源提升寻源效率的诉求并不明显。 杠杆型物料，比如生产型企业中常用的包装材料、基本的制造用物品、常规涂料等。这类物资价格变化对利润影响显著，且供应商资源相对分散。这类物料对于扩展寻源资源需求明确，同时对质量有一定要求，除扩展寻源资源的需求之外，对于精准匹配优质合格供应商也有明确需求。 交易型物料，比如MRO、电工电气的低压产品。这类物资品类标准化程度高且对质量要求相对较低，供应商资源分散，对于扩展寻源资源的需求明确。 不同物料品类特征不同，企业应当制定差异化寻源策略，以实现高效率采购寻源。针对战略型、瓶颈型物料，供应商相对稳定，一般由总部进行集中采购，基于采购数字化系统可以将线下流程转移至线上寻源模块，提升采购效率。针对杠杆型物料，企业可以通过将信息发送至采购数字化系统中的可信供应商池，扩大寻源半径。过去，企业询比价、招投标寻源，多采用对接各大公开招投标网站，但实际投标和对接的供应商数量少。通过采购数字化系统建立可信供应商池，将大大扩展潜在合作供应商数量。采购数字化平台还提供供应商运营服务，在接到采购需求时，主动协助企业联系供应商，提高寻源效率。比如阿里云企业采购平台，设置专门的运营团队关注寻源需求，筛选并通知潜在供应商。针对交易型物料，采购数字化平台通过接口的方式，打通多方采购商城平台供应商资源，将海量供应商资源汇集到企业采购数字化平台中，扩大寻源半径。同时，利用历史交易数据，如：类目、资质、交易历史等，提高供应商匹配效率。目前主要的采购商城平台有：阿里云企业采购、京东、苏宁易购、西域、工品汇等。图 22： 全品类数字化采购流程 \\4. 加强集团整体管控能力对于企业而言，满足合规需求是刚需。随着合规性要求的日渐严格，公开透明的采购流程、权责清晰的采购管理体系成为企业采购管控亟待解决的问题。集团企业通过建立集采平台，不仅可以以量换价，还可以将下属企业采购管理统一化、标准化，提升采购透明度避免合规风险，更重要的是集团总部可以通过采购过程数据掌握下属企业运营情况，在财务数据的基础之上细化业务管理颗粒度。4.1. 建立流程可追溯的企业数字化采购体系，实现招投标阳光化与供应商管理流程可追溯是企业采购管理的难点。采购决策都有依据，流程都可以追溯。如果在采购过程中权限设置过于简单，可能决策速度快，但是风险很大，腐败和滥用职权的发生率也会很高。通过实施采购数字化，对采购的关键环节进行企业整体管控，包括招投标规范化、供应商综合管理，可以有效降低风险。招投标规范化管理具体包括：招标文件模板化管理；支持网上投标、在线澄清、网上开票，实现招投标业务全过程动态实时记录；全流程电子化、无纸化管理，如招标文件、投标文件、澄清、中标通知书等所有过程文件，可网上存储，随时随地访问。供应商综合管理包括：建立供应商准入体系、分级体系和运营机制。供应商准入通过纳税编号作为主键/唯一索引，保证供应商没有重复入驻。根据供应商的交易物资种类、在平台上交易额等，对供应商进行分类和重要性排序，分为战略供应商、核心供应商等。基于供应商等级及权益体系对供应商分层运营，享受不同的供应商权益，比如品牌宣传、流量倾斜、优先推送商机、金融服务等。 采购数字化最佳实践——一采通云图控股采购数字化转型背景云图控股（股票代码：002539），是一家生产复合肥、联碱、磷化工及食用盐等产品的集团型企业，是中国及国际水溶性肥料标准主起草者（标准号：HG/T 4365-2012）。云图控股下设五大事业部，100多家分子公司。云图控股采购业务需求及痛点云图控股作为流程制造企业，采购和供应链特征呈现明显的分品类特征：\\1. 生产性原辅料：采购大进大出，采购人员对原料趋势判断、时机选择、储备量决策对于成本管控至关重要，是采购的重中之重，但以往的信息化实践，鲜有能够将该部分业务纳入全面数字化体系的应用模式。\\2. 非生产采购：以设备维护及日常运营类物资采购为主，是保障生产连续稳定的关键，采购品类杂，规格多，渠道乱。开源引流、优化供方、需求管理、竞争性降本等都是非生产采购的重要方法策略。\\3. 工程及专业设备：专业化采购，为高价值、高风险采购，过程复杂、需要强化采购过程的专业方法支持和过程合规保障。除品类差异带来的挑战以外，企业是动态发展的，各阶段战略目标不同，采购体系以及平台的建设迭代，须以企业战略目标为导向。云图控股近年运营战略从高速发展向精益化运营转型，其采购体系建设也经历了：“车头带”模式和“动车组”模式两个阶段。“车头带”：企业高速发展，在各个产业方向快速扩张，集团需要加强采购集约化整合，达到过程合规、运行高效、集采降本的运营目标。此阶段，快速建立以集团集采为主的集约化体系为采购平台的重点。“动车组”：企业精益化运营，各工厂由生产中心转型为利润中心。采购平台成为赋能中心，整合采购资源、专业方法并有效授权各工厂，集团做好合规管控、数字赋能、战略采购三项职能，让工厂成为有动力的列车组，提升企业运营效率与效益。一采通以“全流程、全品类、场景化”为理念，以“私有化+公有云”架构的产品，为企业数字化采购提供专业平台和最佳实践服务，涵盖招采管理、集约化采购、精益供应链、战略采购、项目供应链、产业化服务等，客群覆盖大型集团企业、流程制造类、离散装配制造类、运营类企业等，为企业提供从“工具化”向“管控闭环”、“数字化运营”、“产业化增值”等不同价值阶段跃升过程中的数字化采购服务。2017年，云图控股经过专业考察和调研选择与一采通合作建设数字化采购平台，在后续发展过程中完成了两个战略阶段的项目建设及运营推广工作，取得了良好运行效果。图 23：云图控股数字化采购平台效果 1、建立全品类、全流程可追溯的集团数字化采购平台。针对云图控股流程制造供应链特征，按生产采购、非生采购以及专业采购，分别定义采购模式与流程、策略，实现了全品类、全流程的数字化运行。业务规范、阳光、可追溯。整合供应商寻源准入、阳光招标采购、合同履约及供应协同、供应商数字化评估，实现了全集团采购业务闭环化，数字化运行，有效控制合规性风险。2、增强供应商管理能力，建立供应商准入、合作、评价、奖惩的全周期闭环体系。对供应商的基本资质、技术能力、生产能力、产品质量、保障能力进行认可后，才允许进入企业的供应体系。供应商的分级管理中，采用不同的分级管理策略。建立数字化的供应商计划评估体系，按照不同的评估策略、可由专家进行手工打分，或者基于系统的到货及时率、合格率等按照设定的规则自动判分，形成量化的评价结果。形成的最终评价结果，可提供配额调整、供应商整改、供应商淘汰等奖惩手段对供应商的表现进行复盘和管理。采购数字化平台上线后，加强了对核心供应商的管理能力，同时供应商通过移动端提高了订单的处理效率，交货及时率提高至95%以上。图 24：采购数字化平台供应商管理 3、生产采购、原辅材料采购全业务、全流程上线运行，融合多票制业务，支持原辅材料供应多种物流模式下的采购应用场景。生产原辅料全线全场景运行，为云图采购数字化运营的实现奠定了重要基础。4、建立战略采购业务模式：在行情公开透明的市场环境下，价格不再是原辅材料的决策重点，趋势判断、时机把握、策略执行才是富有经验的采购人员的宝贵价值，也是企业针对生产原辅材料采购的管控重点。一采通平台建立常规协议采购与战略采购两类模式。通过战略采购模式，将原辅材料的行情趋势判断、购入时机、采购及储备量决策和执行纳入平台管理，建立战略采购的决策、执行、跟踪、效益评估机制。图 25：采购数字化平台原辅材料战略采购模式 5、针对非生产及专业采购，提供多样化采购方法，同时开创性的将多种采购方法组合运用，例如：将竞争性谈判、综合评价以及竞价组合运用，在保障采购过程公开、合规、公正基础上，更兼具采购实效，企业获得更强的采购降本控制能力。6、利用互联网大数据资源，建立面向全网的采购信息公开，采购需求开源征询，全员推荐供方等模式，形成社会监督，吸引优质供方，公开寻源。7、采购运营数字化管理：以生产及非生产采购全品类、全场景运行，常规采购、战略采购、专业采购等多种模式为基础，建立云图控股采购管理标准化体系，达到数字化运营目标。企业采购的每一笔决策、每一次操作所带来的效益、成本变化均由平台提供数字量化测算，将采购执行、管控决策、战略导向三级统一，形成云图集团采购运营管理的数字化体系。企业的采购与供应链体系提升，不是一蹴而就的过程，采购平台的建设，也不能死守标准化，照搬经验主义，而是必须为企业阶段性战略目标服务，制定有针对性的方案及组织实施实践。云图控股数字化采购平台的建设过程为快速发展的集团化企业建设数字化采购、持续升级迭代提供了最佳实践的参考。4.2. 打通集团与分子公司之间的信息流，增强集团管控力度 过去，信息流尚未打通，集团型企业对下级单位管控力度弱。对于分、子公司众多且地域分散的集团而言，总部对下级单位的管控力度弱。传统模式下，采购多在线下进行，信息沟通手段受限，存在信息孤岛，信息流尚未贯穿采购全流程，集团总部无法整体掌握下级单位的实际采购业务情况。部署采购数字化平台后，系统数据之间打通，可以将二级公司的采购权收归集团。通过将跨部门、跨系统的数据进行融合，基于核心数据指标自上而下建立采购经营指标管理体系。平台还将提供数据看板功能，即集团下属采购单位在某一时间段的采购量、各个供应商的采购量、年月日周期内的采购量。集团可以通过观测对比历史数据，排查异常情况，并形成未来预测。 采购数字化最佳实践——支出宝中环洁环境有限公司是国内领先的城乡环境综合服务运营商，拥有中国清洁清洗行业国家一级资质，业务覆盖环境卫生、垃圾分类、市政管养、绿化养护、物业服务、应急保障等领域。自2018年正式运营以来，中环洁业务快速增长，经过几年的发展，公司在运营实力、项目规模、专业能力方面逐步进入行业前列，已成为行业内成长最快、最具影响力的企业。近年来，中环洁全国性业务快速展开，业务趋于规模化、多元化，随之中环洁的采购总额以及采购复杂性快速提升，对采购管理提出新的要求：一是管控方面。随着全国业务的开展，中环洁的分公司散布全国30多个城市，需要打通采购业务信息流，便于集团层面实时了解整体的采购支出，提升集团整体管控能力，支撑采购决策。二是协同方面。垃圾分类政策之下，环卫市场迎来新的增长点，中环洁项目更多且周期紧，对采购端效率提出明确要求，亟待通过采购线上化，完成采购端数字化管理转型。当然，团队分散，基层工作者文化程度低，集采、分散采购、授权采购等多种采购管理模式，都给中环洁采购管理提升提出了更高要求。面对诸多需求痛点，经过慎重考虑，中环洁选择与支出宝合作，上线采购系统落地数字化采购解决方案。支出宝创立于2016年，提供专业智能的非生产型采购支出管理SaaS解决方案，是国家高新企业、中关村高新企业。支出宝通过轻量化的订阅式服务为多个行业的新经济企业提供S2C（寻源到合同）、P2P(采购支出管理)、SRM（供应商管理/风险管理）的数字化采购整体解决方案。从0到1，实现端到端数字化采购中环洁成立之初（2017年），尚未上线成熟的采购系统，主要采购活动均于线下进行。为了应对采购业务挑战，实现降本增效并提升管控能力，中环洁需要从0到1推进采购业务上线，实现端到端的数字化采购。采购流程包含寻源、合同管理、订单管理、收货管理、结算支付等环节，实现端到端的数字化采购，需要建设从寻源到订单到付款的采购全流程的能力。此外，供应商管理、支出管理等场景覆盖采购全流程，亦是端到端采购数字化能力建设的重点。从0到1，支出宝提供S2C（寻源到合同）、P2P(采购支出管理)、SRM（供应商管理/风险管理）的数字化采购整体解决方案，支撑中环洁实现端到端数字化采购。图 26：支出宝一站式解决方案 首先，立足实际需求，规划采购数字化路径。实现端到端数字化采购，涉及采购多品类、多环节、多参与方，目前企业多采用分阶段推进的模式。支出宝根据中环洁采购数字化情况以及实际业务需求，规划采购数字化路径，项目整体分三期推进：一期上线采购寻源系统；二期实现从采购到付款的端到端管理，并与中环洁内部ERP系统打通；三是上线BI报表分析功能，为管理提供更科学的分析支撑。项目一期，实现从寻源端到合同端的数字化采购。项目一期主要上线寻源到合同S2C模块，支持线上寻源，同时提供合同全生命周期智能化管理。寻源系统主要针对中环洁集采物资品类，中环洁可线上发布询比价、招投标需求信息，同时整个的寻源过程的审批也是线上操作，包括后期对供应商的报价和最终的定标；同时支出宝提供招投标代理等增值服务，降低专业采购招投标工作的管理门槛和投入。随着寻源线上化，那么对于供应商资质的审核也逐步线上化，支出宝供应商管理/风险管理SRM模块提供规范的供应商准入、绩效考核、淘汰等全流程管理功能，现中环洁2000多家供应商实现在线管理。项目二期，实现从采购执行端到支付端的数字化采购。项目二期主要上线采购到付款P2P模块，从请购、审批、预算管控、订单、收货、发票、付款等流程全部实现线上化管理。中环洁上线内部采购商城，采购商城对接京东、工品汇、晨光等电商平台和企业自有供应商资源。由于中环洁的采购业务在快速发展，不断有新的采购场景与采购需求出现，采购商城的供应商资源对于中环洁自采非生物资具有明确价值。支出宝同时与企业内部ERP打通，实现物料、供应商等主数据同步，实现企业内部采购计划、采购订单的实时协同，打通端到端的信息流。项目三期，上线增强型业务分析BI报表。在项目一、二期建设基础上，中环洁已经具备端到端数字化采购能力，打通信息流实现采购数据持续沉淀。项目三期上线BI报表分析功能，将沉淀的采购数据用起来，实现预算进度、合规分析、支出渠道分析、品类分析等，使决策层实时掌握采购支出情况，并支撑业务决策。目前，支出宝已完成三期项目建设，为中环洁搭建了一站式采购管理平台，涵盖S2C（寻源到合同）、P2P(采购支出管理)、SRM（供应商管理/风险管理）三个模块，并与内部ERP系统对接，打通端到端的采购信息流，沉淀采购数据，支撑中环洁实现数字化采购。采购行业knowhow，满足企业多元化需求采购系统是数字化采购的基座，采购系统的易用性、专业性等优势背后，更多的是供应商对采购场景的深度理解力。不同行业不同企业的采购，在采购流程、采购品类、采购模式千差万别，采购场景颇为复杂。单就采购品类而言，生产性物资有生产原材料、辅材、专用设备等，非生产性物资有工程、设备、服务、办公用品、员工福利以及其他品类。以电商平台为参考，电商平台有近千万个SKU，上千个采购品类，品类管理复杂。如何针对不同品类制定差异化的采购策略，如何规划全品类上线，背后更多的是靠供应商对采购场景的深刻理解力，也就是采购行业know how。对于中环洁而言，采购数字化能力需要从0到1推进落地，涉及采购多品类、多场景、多模式，复杂度高，对采购数字化供应商的采购行业know how提出更高要求。支出宝是行业里面少有的由采购专业人士创立的采购管理SaaS企业，创始人及团队具备多年的采购及供应链实战经验，更受邀参与工信部《企业数字化采购实施指南》的联合编撰工作。同时具备多行业采购服务经验，沉淀为对不同行业不同采购场景深刻理解力。凭借专业能力，支出宝对中环洁采购现状与需求进行评估，制定科学可行的数字化落地路径，并为中环洁打造易用、专业、成熟的采购系统，赢得客户良好口碑。采购数字化深度赋能，提升中环洁采购管理能力目前，中环洁业务运营中涉及到的主要采购物资全部上线，包括作业及办公车辆、设施设备、运营物资物料、劳保福利等多个品类。中环洁已经具备端到端的数字化采购能力，通过数字化运营管理及供应商资源，重构中环洁采购能力，实现采购的敏捷、高效、透明管理，同时提升中环洁在集团层面对采购支出的管控能力。首先，伴随支出宝采购管理系统上线，中环洁规范整合三十余家城市分公司采购流程，实现集中采购、授权采购、分散采购等多种采购管控模式，打通采购信息流，通过商业智能分析为采购决策制定提供支持，了解整体采购支出，做到预算实时管控，支出实时可控，实现集团层面的高效支出管控。其次，端到端效率提升明显。寻源到合同端，中环洁从原先线下邮件的寻源方式转变为线上寻源，同时推动供应商缩短报价时间，整体寻源效率提高了57%，同时供应商在平台上进行统一报价，游戏规则公开公正透明，大幅降低采购成本；采购执行到支付端，中环洁PR-PO的处理周期从7天缩短到3天，效率提升约50%，减少了采购人员的事务型工作。同时，支出宝采购管理系统优秀的易用性让每一个中环洁员工都可以不经过培训很方便的使用。目前，中环洁现在已经有数千个供应商实现线上协同，集团内部共享供应商资源，初步建立了供应商的私域流量池；而且企业结构化支出占比已接近80%，达到环卫行业最高管理水平，引领了环卫行业数字化采购支出管理的潮流。结语 2035年的采购是什么样？应用AI、物联网、RPA等新型技术，整个供应链可以做到信息流、实物流、资金流的高度集成，从而提高效率、降低成本。具体表现为：实现采购供需匹配精准而及时，上游厂商定制化的需求可以在最快的速度内被满足。实现采购全流程打通，采购后的运输、支付、结算流程被无缝嵌入。实现企业内部和外部的协同，企业部门间形成跨部门协作，企业与外部的合作伙伴形成业务共建。实现数据要素的利用，采购业务数据的收集与利用，为业务决策提供数据洞察，形成数据驱动型的新型采购体系。新技术将发挥前所未有的作用，真正把供应链“端到端”的链接起来。立足当下，面对未来，依然有很多不确定性。数字化转型的巨浪下，采购数字化建设更加明确了使命，承载着采购的资金流、实物流、信息流，连接着企业、供应商、生产商、分销商、零售商、消费者和生态合作伙伴，通过优化采购流程，实现成本更低、流程一体化协同、集团管控水平更高，通过提高产品和服务在企业内部和供应链中流动所创造的市场价值，给企业增加竞争优势。巨浪已来，加速建设数字能力的企业，才能乘风破浪，走出转型之路。","link":"/2021/12/17/%E6%95%B0%E5%AD%97%E5%8C%96%E6%8B%9B%E9%87%87%E8%B6%8B%E5%8A%BF/"}],"tags":[],"categories":[]}